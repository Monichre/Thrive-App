"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _TextureLoader2 = require("./TextureLoader");

var _TextureLoader3 = _interopRequireDefault(_TextureLoader2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TextureLoaderRawObject = function (_TextureLoader) {
  _inherits(TextureLoaderRawObject, _TextureLoader);

  function TextureLoaderRawObject() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TextureLoaderRawObject);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TextureLoaderRawObject.__proto__ || Object.getPrototypeOf(TextureLoaderRawObject)).call.apply(_ref, [this].concat(args))), _this), _this.textureMemoized = new WeakMap(), _this.textures = [], _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TextureLoaderRawObject, [{
    key: "dispose",
    value: function dispose() {
      var gl = this.gl;

      this.textures.forEach(function (t) {
        return gl.deleteTexture(t);
      });
      this.textureMemoized = new WeakMap();
      this.textures = [];
    }
  }, {
    key: "getSize",
    value: function getSize(obj) {
      var texture = this.textureMemoized.get(obj);
      if (!texture) return null;
      return this.mapInputSize(obj);
    }
  }, {
    key: "get",
    value: function get(obj) {
      var gl = this.gl;

      var texture = this.textureMemoized.get(obj);
      if (!texture) {
        texture = gl.createTexture();
        this.textureMemoized.set(obj, texture);
        this.textures.push(texture);
      }
      gl.bindTexture(gl.TEXTURE_2D, texture);
      var value = this.mapInput ? this.mapInput(obj) : obj;
      if (value) {
        // $FlowFixMe we are loosely on types here because we allow more that browser WebGL impl
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);
      } else {
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 2, 2, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
      }
      return texture;
    }
  }]);

  return TextureLoaderRawObject;
}(_TextureLoader3.default);

exports.default = TextureLoaderRawObject;
//# sourceMappingURL=TextureLoaderRawObject.js.map