{"version":3,"sources":["../src/TextureLoader.js"],"names":["noop","TextureLoader","gl","input","promise","Promise","dispose"],"mappings":";;;;;;;;;;AAGA,IAAMA,OAAO,SAAPA,IAAO,GAAM,CAAE,CAArB;;AAEA;;;;IAGqBC,a;;AAMnB;;;AAGA,yBAAYC,EAAZ,EAAuC;AAAA;;AACrC,SAAKA,EAAL,GAAUA,EAAV;AACD;;AAED;;;;AAZA;;;;;AAiBA;;;;;;;;;AAKA;;;;yBAIKC,K,EAA2C;AAC9C;AACA,aAAO;AACLC,iBAAS,IAAIC,OAAJ,CAAYL,IAAZ,CADJ;AAELM,iBAASN;AAFJ,OAAP;AAID;;AAED;;;;;;AAMA;;;;;;;;;kBAzCmBC,a","file":"TextureLoader.js","sourcesContent":["//@flow\nimport type { DisposablePromise } from \"./helpers/disposable\";\n\nconst noop = () => {};\n\n/**\n * A texture loader is an extensible way to add more \"renderable texture\" into gl-react.\n */\nexport default class TextureLoader<T> {\n  /**\n   * @property {WebGLRenderingContext} gl - the contextual rendering context\n   */\n  gl: WebGLRenderingContext;\n\n  /**\n   *\n   */\n  constructor(gl: WebGLRenderingContext) {\n    this.gl = gl;\n  }\n\n  /**\n   * You must free everything you have done and stop all pending load() calls.\n   */\n  +dispose: () => void;\n\n  /**\n   * Check if the loader should handle a given input\n   */\n  +canLoad: (input: any) => boolean;\n\n  /**\n   * Load the resource by its input. it returns a promise and a dispose function.\n   * If load() is called twice with the same input, same disposable object is expected (implementations needs to cache it).\n   */\n  load(input: T): DisposablePromise<WebGLTexture> {\n    // noop default implementation\n    return {\n      promise: new Promise(noop),\n      dispose: noop\n    };\n  }\n\n  /**\n   * try to get in sync the texture for a given input. otherwise null.\n   * If null is returned, load() can be called in order to load the resource that will later be available in a future get().\n   */\n  +get: (input: T) => ?WebGLTexture;\n\n  /**\n   * try to get in sync the texture size for a given input. otherwise null.\n   */\n  +getSize: (input: T) => ?[number, number];\n}\n"]}