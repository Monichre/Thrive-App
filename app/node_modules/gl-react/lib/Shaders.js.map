{"version":3,"sources":["../src/Shaders.js"],"names":["isShaderIdentifier","ensureShaderDefinition","shaderDefinitionToShaderInfo","shaderInfoEquals","ShaderID","shaderDefinitions","shaderNames","shaderResults","genShaderId","i","toString","staticVert","shaderIdentifier","type","id","definition","ctx","frag","vert","s1","s2","Shaders","create","shadersDef","sheet","Object","keys","forEach","k","shaderId","freeze","result","getName","String","getShortName","get"],"mappings":";;;;;;;;;;QA4EgBA,kB,GAAAA,kB;QASAC,sB,GAAAA,sB;QAWAC,4B,GAAAA,4B;QASAC,gB,GAAAA,gB;;AAxGhB;;;;AACA;;;;;;;;AAGA,IAAMC,WAAW,UAAjB;;AAEA;;;;;;;;;AAcA;;;;;AAcA;;;;;;;;;;;AAaA;;;;;AAcA,IAAMC,oBAA2D,EAAjE;AACA,IAAMC,cAA2C,EAAjD;AACA,IAAMC,gBAAiD,EAAvD;;AAEA,IAAMC,cAAe;AAAA,SAAK;AAAA,WAAM,CAAC,EAAEC,CAAH,EAAMC,QAAN,EAAN;AAAA,GAAL;AAAA,CAAD,CAA8B,CAA9B,CAApB;;AAEA,IAAMC,iDAAN;;AAQO,SAASX,kBAAT,CAA4BY,gBAA5B,EAA8D;AACnE,SACE,QAAOA,gBAAP,yCAAOA,gBAAP,OAA4B,QAA5B,IACA,CAAC,CAACA,gBADF,IAEAA,iBAAiBC,IAAjB,KAA0BT,QAF1B,IAGA,OAAOQ,iBAAiBE,EAAxB,KAA+B,QAJjC;AAMD;;AAEM,SAASb,sBAAT,CACLc,UADK,EAGa;AAAA,MADlBC,GACkB,uEADH,EACG;;AAClB,2BACED,cAAc,OAAOA,WAAWE,IAAlB,KAA2B,QAD3C,EAEE,4CAA4CD,GAF9C;AAIA,SAAOD,UAAP;AACD;;AAEM,SAASb,4BAAT,CACLa,UADK,EAEO;AACZ,SAAO;AACLE,UAAMF,WAAWE,IADZ;AAELC,UAAMH,WAAWG,IAAX,IAAmBP,UAFpB,CAE+B;AAF/B,GAAP;AAID;;AAEM,SAASR,gBAAT,CAA0BgB,EAA1B,EAA0CC,EAA1C,EAAmE;AACxE,SAAOD,GAAGF,IAAH,KAAYG,GAAGH,IAAf,IAAuBE,GAAGD,IAAH,KAAYE,GAAGF,IAA7C;AACD;;AAED;;;;AAIA,IAAMG,UAAU;AACd;;;;;;;;;;;;;AAaAC,QAdc,kBAceC,UAdf,EAc+C;AAC3D,QAAMC,QAAQ,EAAd;AACAC,WAAOC,IAAP,CAAYH,UAAZ,EAAwBI,OAAxB,CAAgC,aAAK;AACnC,UAAMZ,aAAad,uBACjBsB,WAAWK,CAAX,CADiB,EAEjB,0BAA0BA,CAA1B,GAA8B,UAFb,CAAnB;AAIA,UAAMd,KAAKN,aAAX;AACA,UAAMqB,WAAWJ,OAAOK,MAAP,CAAc,EAAEjB,MAAMT,QAAR,EAAkBU,MAAlB,EAAd,CAAjB;AACAT,wBAAkBS,EAAlB,IAAwBC,UAAxB;AACAT,kBAAYQ,EAAZ,IAAkBc,CAAlB;AACAJ,YAAMI,CAAN,IAAWC,QAAX;AACA,UAAME,SAAS7B,6BAA6Ba,UAA7B,CAAf;AACAR,oBAAcO,EAAd,IAAoBiB,MAApB;AACD,KAZD;AAaA,WAAOP,KAAP;AACD,GA9Ba;AA+BdQ,SA/Bc,mBA+BNpB,gBA/BM,EA+BsC;AAClD,WACE,CAACN,YAAYM,iBAAiBE,EAA7B,KAAoC,KAArC,WACImB,OAAOrB,iBAAiBE,EAAxB,CADJ,CADF;AAID,GApCa;AAqCdoB,cArCc,wBAqCDtB,gBArCC,EAqC2C;AACvD,WAAON,YAAYM,iBAAiBE,EAA7B,KAAoC,KAA3C;AACD,GAvCa;AAwCdqB,KAxCc,eAwCVvB,gBAxCU,EAwCsC;AAClD,6BACEA,iBAAiBE,EAAjB,IAAuBT,iBADzB,EAEE,0FAFF,EAGEO,iBAAiBE,EAHnB;AAKA,WAAOP,cAAcK,iBAAiBE,EAA/B,CAAP;AACD;AA/Ca,CAAhB;kBAiDeO,O","file":"Shaders.js","sourcesContent":["//@flow\nimport invariant from \"invariant\";\nimport GLSL from \"./GLSL\";\nimport type { GLSLCode } from \"./GLSL\";\n\nconst ShaderID = \"ShaderID\";\n\n/**\n * An object that contains a `frag` GLSLCode.\n * @example\n *  {\n *    frag: GLSL`...`\n *  }\n */\ntype ShaderDefinition = {|\n  frag: GLSLCode,\n  vert?: GLSLCode\n|};\n\nexport type { ShaderDefinition };\n\n/**\n *\n */\ntype ShaderIdentifier = {\n  type: typeof ShaderID,\n  id: string\n};\n\nexport type { ShaderIdentifier };\n\ntype ShaderIdentifierMap<T> = {\n  [key: string]: T\n};\n\n/**\n * An object map from a key string to a **ShaderDefinition**.\n * @example\n *  {\n *    helloGL: {\n *      frag: GLSL`...`\n *    }\n *  }\n */\ntype ShadersDefinition = {\n  [key: string]: ShaderDefinition\n};\n\n/**\n * An object map from a key string to a **ShaderIdentifier** that you can pass to `<Node shader>`\n */\ntype ShadersSheet<S: ShadersDefinition> = {\n  [key: $Keys<S>]: ShaderIdentifier\n};\n\ntype ShaderInfo = {\n  frag: GLSLCode,\n  vert: GLSLCode\n};\n\nexport type { ShaderInfo };\n\nconst shaderDefinitions: ShaderIdentifierMap<ShaderDefinition> = {};\nconst shaderNames: ShaderIdentifierMap<string> = {};\nconst shaderResults: ShaderIdentifierMap<ShaderInfo> = {};\n\nconst genShaderId = (i => () => (++i).toString())(0);\n\nconst staticVert = GLSL`\nattribute vec2 _p;\nvarying vec2 uv;\nvoid main() {\ngl_Position = vec4(_p,0.0,1.0);\nuv = vec2(0.5, 0.5) * (_p+vec2(1.0, 1.0));\n}`;\n\nexport function isShaderIdentifier(shaderIdentifier: mixed): boolean {\n  return (\n    typeof shaderIdentifier === \"object\" &&\n    !!shaderIdentifier &&\n    shaderIdentifier.type === ShaderID &&\n    typeof shaderIdentifier.id === \"string\"\n  );\n}\n\nexport function ensureShaderDefinition(\n  definition: any,\n  ctx?: string = \"\"\n): ShaderDefinition {\n  invariant(\n    definition && typeof definition.frag === \"string\",\n    \"A `frag` GLSL code (string) is required\" + ctx\n  );\n  return definition;\n}\n\nexport function shaderDefinitionToShaderInfo(\n  definition: ShaderDefinition\n): ShaderInfo {\n  return {\n    frag: definition.frag,\n    vert: definition.vert || staticVert // FIXME this is somewhat experimental for now, vert implement needs to expect a _p attribute\n  };\n}\n\nexport function shaderInfoEquals(s1: ShaderInfo, s2: ShaderInfo): boolean {\n  return s1.frag === s2.frag && s1.vert === s2.vert;\n}\n\n/**\n * Define shaders statically.\n * @namespace\n */\nconst Shaders = {\n  /**\n   * @memberof Shaders\n   * @param {ShadersDefinition} shadersDef - an object that statically define all shaders.\n   * @returns {ShadersSheet}, an object map that returns a ShaderIdentifier for each shader key defined in the shaders definition.\n   * @example\n   *  const shaders = Shaders.create({\n   *    helloGL: {\n   *      frag: GLSL`...`\n   *    }\n   *  });\n   *  ...\n   *  <Node shader={shaders.helloGL} />\n   */\n  create<S: ShadersDefinition>(shadersDef: S): ShadersSheet<S> {\n    const sheet = {};\n    Object.keys(shadersDef).forEach(k => {\n      const definition = ensureShaderDefinition(\n        shadersDef[k],\n        \" in Shaders.create({ \" + k + \": ... })\"\n      );\n      const id = genShaderId();\n      const shaderId = Object.freeze({ type: ShaderID, id });\n      shaderDefinitions[id] = definition;\n      shaderNames[id] = k;\n      sheet[k] = shaderId;\n      const result = shaderDefinitionToShaderInfo(definition);\n      shaderResults[id] = result;\n    });\n    return sheet;\n  },\n  getName(shaderIdentifier: ShaderIdentifier): string {\n    return (\n      (shaderNames[shaderIdentifier.id] || \"???\") +\n      `#${String(shaderIdentifier.id)}`\n    );\n  },\n  getShortName(shaderIdentifier: ShaderIdentifier): string {\n    return shaderNames[shaderIdentifier.id] || \"???\";\n  },\n  get(shaderIdentifier: ShaderIdentifier): ShaderInfo {\n    invariant(\n      shaderIdentifier.id in shaderDefinitions,\n      \"Shader %s does not exist. Make sure you don't have gl-react dup issue: `npm ls gl-react`\",\n      shaderIdentifier.id\n    );\n    return shaderResults[shaderIdentifier.id];\n  }\n};\nexport default Shaders;\n"]}