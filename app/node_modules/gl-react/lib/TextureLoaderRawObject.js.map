{"version":3,"sources":["../src/TextureLoaderRawObject.js"],"names":["TextureLoaderRawObject","textureMemoized","WeakMap","textures","gl","forEach","deleteTexture","t","obj","texture","get","mapInputSize","createTexture","set","push","bindTexture","TEXTURE_2D","value","mapInput","texImage2D","RGBA","UNSIGNED_BYTE"],"mappings":";;;;;;;;AACA;;;;;;;;;;;;IACqBA,sB;;;;;;;;;;;;;;sNACnBC,e,GAA4C,IAAIC,OAAJ,E,QAC5CC,Q,GAAgC,E;;;;;8BAKtB;AAAA,UACAC,EADA,GACO,IADP,CACAA,EADA;;AAER,WAAKD,QAAL,CAAcE,OAAd,CAAsB;AAAA,eAAKD,GAAGE,aAAH,CAAiBC,CAAjB,CAAL;AAAA,OAAtB;AACA,WAAKN,eAAL,GAAuB,IAAIC,OAAJ,EAAvB;AACA,WAAKC,QAAL,GAAgB,EAAhB;AACD;;;4BAEOK,G,EAAQ;AACd,UAAIC,UAAU,KAAKR,eAAL,CAAqBS,GAArB,CAAyBF,GAAzB,CAAd;AACA,UAAI,CAACC,OAAL,EAAc,OAAO,IAAP;AACd,aAAO,KAAKE,YAAL,CAAkBH,GAAlB,CAAP;AACD;;;wBAEGA,G,EAAQ;AAAA,UACFJ,EADE,GACK,IADL,CACFA,EADE;;AAEV,UAAIK,UAAU,KAAKR,eAAL,CAAqBS,GAArB,CAAyBF,GAAzB,CAAd;AACA,UAAI,CAACC,OAAL,EAAc;AACZA,kBAAUL,GAAGQ,aAAH,EAAV;AACA,aAAKX,eAAL,CAAqBY,GAArB,CAAyBL,GAAzB,EAA8BC,OAA9B;AACA,aAAKN,QAAL,CAAcW,IAAd,CAAmBL,OAAnB;AACD;AACDL,SAAGW,WAAH,CAAeX,GAAGY,UAAlB,EAA8BP,OAA9B;AACA,UAAMQ,QAAQ,KAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcV,GAAd,CAAhB,GAAqCA,GAAnD;AACA,UAAIS,KAAJ,EAAW;AACT;AACAb,WAAGe,UAAH,CACEf,GAAGY,UADL,EAEE,CAFF,EAGEZ,GAAGgB,IAHL,EAIEhB,GAAGgB,IAJL,EAKEhB,GAAGiB,aALL,EAMEJ,KANF;AAQD,OAVD,MAUO;AACLb,WAAGe,UAAH,CACEf,GAAGY,UADL,EAEE,CAFF,EAGEZ,GAAGgB,IAHL,EAIE,CAJF,EAKE,CALF,EAME,CANF,EAOEhB,GAAGgB,IAPL,EAQEhB,GAAGiB,aARL,EASE,IATF;AAWD;AACD,aAAOZ,OAAP;AACD;;;;;;kBAtDkBT,sB","file":"TextureLoaderRawObject.js","sourcesContent":["//@flow\nimport TextureLoader from \"./TextureLoader\";\nexport default class TextureLoaderRawObject<T> extends TextureLoader<T> {\n  textureMemoized: WeakMap<T, WebGLTexture> = new WeakMap();\n  textures: Array<WebGLTexture> = [];\n\n  +mapInput: (t: T) => any;\n  +mapInputSize: (t: T) => ?[number, number];\n\n  dispose() {\n    const { gl } = this;\n    this.textures.forEach(t => gl.deleteTexture(t));\n    this.textureMemoized = new WeakMap();\n    this.textures = [];\n  }\n\n  getSize(obj: T) {\n    let texture = this.textureMemoized.get(obj);\n    if (!texture) return null;\n    return this.mapInputSize(obj);\n  }\n\n  get(obj: T) {\n    const { gl } = this;\n    let texture = this.textureMemoized.get(obj);\n    if (!texture) {\n      texture = gl.createTexture();\n      this.textureMemoized.set(obj, texture);\n      this.textures.push(texture);\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const value = this.mapInput ? this.mapInput(obj) : obj;\n    if (value) {\n      // $FlowFixMe we are loosely on types here because we allow more that browser WebGL impl\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,\n        gl.RGBA,\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        value\n      );\n    } else {\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,\n        gl.RGBA,\n        2,\n        2,\n        0,\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        null\n      );\n    }\n    return texture;\n  }\n}\n"]}