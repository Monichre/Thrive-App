{"version":3,"sources":["../../src/helpers/invariantNoDependentsLoop.js"],"names":["invariantNoDependentsLoop","base","node","i","dependents","length"],"mappings":";;;;;kBAOwBA,yB;;AANxB;;;;AACA;;;;;;AAIA;AACe,SAASA,yBAAT,CACbC,IADa,EAEbC,IAFa,EAGP;AACN,2BACED,SAASC,IADX,EAEE,qDACE,4EAHJ;AAKA,MAAIA,8BAAJ,EAA0B;AACxB,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,KAAKE,UAAL,CAAgBC,MAApC,EAA4CF,GAA5C,EAAiD;AAC/CH,gCAA0BC,IAA1B,EAAgCC,KAAKE,UAAL,CAAgBD,CAAhB,CAAhC;AACD;AACF;AACF","file":"invariantNoDependentsLoop.js","sourcesContent":["//@flow\nimport invariant from \"invariant\";\nimport Node from \"../Node\";\nimport type { Surface } from \"../createSurface\";\nimport type Bus from \"../Bus\";\n\n// check that base does not exist in node dependents graph\nexport default function invariantNoDependentsLoop(\n  base: Bus | Node,\n  node: Node | Surface\n): void {\n  invariant(\n    base !== node,\n    \"gl-react: Found a loop in the rendering graph.\\n\" +\n      \"If you want to get back previous state, please use `backbuffering` instead\"\n  );\n  if (node instanceof Node) {\n    for (let i = 0; i < node.dependents.length; i++) {\n      invariantNoDependentsLoop(base, node.dependents[i]);\n    }\n  }\n}\n"]}