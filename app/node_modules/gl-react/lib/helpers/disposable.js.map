{"version":3,"sources":["../../src/helpers/disposable.js"],"names":["disposeObjectMap","disposeArray","objmap","k","hasOwnProperty","dispose","arr","d","pop"],"mappings":";;;;;QAyBgBA,gB,GAAAA,gB;QAcAC,Y,GAAAA,Y;;;AAnBhB;;;;;;;AATA;;;AAcO,SAASD,gBAAT,CAAyCE,MAAzC,EAAuE;AAC5E,OAAK,IAAMC,CAAX,IAAgBD,MAAhB,EAAwB;AACtB,QAAIA,OAAOE,cAAP,CAAsBD,CAAtB,CAAJ,EAA8B;AAC5BD,aAAOC,CAAP,EAAUE,OAAV;AACA,aAAOH,OAAOC,CAAP,CAAP;AACD;AACF;AACF;;AAED;;;;;;AAjCA;;AAEA;;;;AAoCO,SAASF,YAAT,CAAqCK,GAArC,EAAoD;AACzD,MAAIC,UAAJ;AACA,SAAQA,IAAID,IAAIE,GAAJ,EAAZ;AACED,MAAEF,OAAF;AADF;AAED","file":"disposable.js","sourcesContent":["//@flow\n// Some utility for the disposable pattern\n\n/**\n * @private\n * An object that have a dispose() function\n */\nexport type Disposable = {\n  +dispose: () => void,\n};\n\n/**\n * An object with a `promise` and a `dispose` function to cancel the promise (making a pending promise to never ends).\n */\ntype DisposablePromise<A> = {|\n  +dispose: () => void,\n  promise: Promise<A>,\n|};\nexport type { DisposablePromise };\n\n/**\n * @private\n * destroy an object of disposable.\n * NB the object gets emptied as a way to help the GC.\n */\nexport function disposeObjectMap<T: Disposable>(objmap: { [key: string]: T }) {\n  for (const k in objmap) {\n    if (objmap.hasOwnProperty(k)) {\n      objmap[k].dispose();\n      delete objmap[k];\n    }\n  }\n}\n\n/**\n * @private\n * destroy a array of disposable.\n * NB the array gets emptied as a way to help the GC.\n */\nexport function disposeArray<T: Disposable>(arr: Array<T>) {\n  let d;\n  while ((d = arr.pop()))\n    d.dispose();\n}\n"]}