{"version":3,"sources":["../src/TextureLoaders.js"],"names":["loaderClasses","TextureLoaders","add","loader","push","remove","i","indexOf","splice","get"],"mappings":";;;;;;AAEA;;;;;;AAEA,IAAMA,gBAAkD,gCAAxD;;AAEA;;;;;AAKA,IAAMC,iBAAiB;AACrB;;;;AAIAC,KALqB,eAKjBC,MALiB,EAKkB;AACrCH,kBAAcI,IAAd,CAAmBD,MAAnB;AACD,GAPoB;;AAQrB;;;;AAIAE,QAZqB,kBAYdF,MAZc,EAYqB;AACxC,QAAMG,IAAIN,cAAcO,OAAd,CAAsBJ,MAAtB,CAAV;AACA,QAAIG,MAAM,CAAC,CAAX,EAAcN,cAAcQ,MAAd,CAAqBF,CAArB,EAAwB,CAAxB;AACf,GAfoB;AAgBrBG,KAhBqB,iBAgBf;AACJ,WAAOT,aAAP;AACD;AAlBoB,CAAvB;;kBAqBeC,c","file":"TextureLoaders.js","sourcesContent":["//@flow\nimport type TextureLoader from \"./TextureLoader\";\nimport TextureLoaderNDArray from \"./TextureLoaderNDArray\";\n\nconst loaderClasses: Array<Class<TextureLoader<any>>> = [TextureLoaderNDArray];\n\n/**\n * Extensible way to support more sampler2D uniform texture formats.\n * You must call the methods statically before the `<Surface>` is instanciated.\n * @namespace\n */\nconst TextureLoaders = {\n  /**\n   * Add a TextureLoader class to extend texture format support.\n   * @memberof TextureLoaders\n   */\n  add(loader: Class<TextureLoader<any>>) {\n    loaderClasses.push(loader);\n  },\n  /**\n   * Remove a previously added TextureLoader class.\n   * @memberof TextureLoaders\n   */\n  remove(loader: Class<TextureLoader<any>>) {\n    const i = loaderClasses.indexOf(loader);\n    if (i !== -1) loaderClasses.splice(i, 1);\n  },\n  get() {\n    return loaderClasses;\n  }\n};\n\nexport default TextureLoaders;\n"]}