{"version":3,"sources":["../src/GLSL.js"],"names":["GLSL","GLSLSymbol","strings","code","i","length"],"mappings":";;;;;kBAyBwBA,I;AAxBjB,IAAMC,kCAAa,MAAnB;;AAEP;;;;;AAMA;;;;;;;;;;;;;;;;AAgBe,SAASD,IAAT,CACbE,OADa,EAGH;AACV,MAAIC,OAAO,EAAX;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,QAAQG,MAA5B,EAAoCD,GAApC,EAAyC;AACvCD,YAAQ,CAACC,MAAM,CAAN,GAAU,EAAV,uBAAsBA,IAAI,CAA1B,6BAAsBA,IAAI,CAA1B,KAAD,IAAiCF,QAAQE,CAAR,CAAzC;AACD;AACD,SAAOD,IAAP;AACD","file":"GLSL.js","sourcesContent":["//@flow\nexport const GLSLSymbol = \"GLSL\";\n\n/**\n * object created by **GLSL``** string template\n */\ntype GLSLCode = string;\nexport type { GLSLCode };\n\n/**\n * GLSL string template to write your shader.\n * The library use a string template for esthetic reason (e.g. syntax color support) but also so we can more strongly type things.\n * Note that later, we might do static analysis to generate at compile time the uniform types for instance.\n * See [GLSL spec](http://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf).\n *\n * @return {GLSLCode}, an object you can give to `Shaders.create`'s `frag`.\n * @example\n * GLSL`\n * precision highp float;\n * varying vec2 uv;\n * void main() {\n *   gl_FragColor = vec4(uv.x, uv.y, 0.5, 1.0);\n * }\n * `\n */\nexport default function GLSL(\n  strings: Array<string>,\n  ...values: Array<string>\n): GLSLCode {\n  let code = \"\";\n  for (let i = 0; i < strings.length; i++) {\n    code += (i === 0 ? \"\" : values[i - 1]) + strings[i];\n  }\n  return code;\n}\n"]}