{"version":3,"sources":["../src/connectSize.js"],"names":["connectSize","GLComponent","props","width","height","glSizable","context","getGLSize","cw","ch","onConnectSizeComponentRef","displayName","name","propTypes","number","contextTypes","object","isRequired","childContextTypes"],"mappings":";;;;;;;;;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;AAcA,IAAMA,cAAc,SAAdA,WAAc,CAACC,WAAD;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,kCAwBc;AAAA,qBACiC,IADjC,CACpBC,KADoB;AAAA,YACXC,KADW,UACXA,KADW;AAAA,YACJC,MADI,UACJA,MADI;AAAA,YACiBC,SADjB,GACiC,IADjC,CACMC,OADN,CACiBD,SADjB;;AAE5B,YAAIF,SAASC,MAAb,EAAqB,OAAO,CAACD,KAAD,EAAQC,MAAR,CAAP;;AAFO,mCAGXC,UAAUE,SAAV,EAHW;AAAA;AAAA,YAGrBC,EAHqB;AAAA,YAGjBC,EAHiB;;AAI5B,eAAO,CAACN,SAASK,EAAV,EAAcJ,UAAUK,EAAxB,CAAP;AACD;AA7Be;AAAA;AAAA,wCA8BE;AAChB,eAAO;AACLJ,qBAAW;AADN,SAAP;AAGD;AAlCe;AAAA;AAAA,+BAmCP;AAAA,YACCK,yBADD,GAC+B,KAAKR,KADpC,CACCQ,yBADD;;AAAA,yBAEiB,KAAKH,SAAL,EAFjB;AAAA;AAAA,YAEAJ,KAFA;AAAA,YAEOC,MAFP;;AAGP,eACE,8BAAC,WAAD;AACE,eAAKM;AADP,WAEM,KAAKR,KAFX;AAGE,iBAAOC,KAHT;AAIE,kBAAQC;AAJV,WADF;AAQD;AA9Ce;;AAAA;AAAA,8BAWTO,WAXS,qBAWoBV,YAAYU,WAAZ,IAClCV,YAAYW,IADsB,IAElC,GAbc,gBAcTC,SAdS,GAcG;AACjBV,WAAO,oBAAUW,MADA;AAEjBV,YAAQ,oBAAUU;AAFD,GAdH,SAkBTC,YAlBS,GAkBM;AACpBV,eAAW,oBAAUW,MAAV,CAAiBC;AADR,GAlBN,SAqBTC,iBArBS,GAqBW;AACzBb,eAAW,oBAAUW,MAAV,CAAiBC;AADH,GArBX;AAAA,CAApB;;kBAiDejB,W","file":"connectSize.js","sourcesContent":["//@flow\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * A High Order Component (HOC) function that provides\n * the contextual `width` and `height` props to a GL Component.\n * It also merge optional width,height props to override the contextual size\n * @function connectSize\n * @param GLComponent - a React Component that receives width and height props\n * @returns {ReactClass<*>} a Component that merge width and height props\n * with context and renders `GLComponent`.\n * @example\n *  const Foo = ({ width, height }) => <Node uniforms={{ width, height }} />;\n *  const FooConnected = connectSize(Foo);\n *  <FooConnected /> // you don't have to provide width, height.\n *  <FooConnected width={64} height={64} /> // If you do, you override width,height in the context as well, so <Node> is implicitly receiving the new width/height.\n */\nconst connectSize = (GLComponent: ReactClass<*>) =>\n  class extends Component {\n    props: {\n      width?: number,\n      height?: number,\n      children?: any,\n      onConnectSizeComponentRef?: (ref: GLComponent) => void\n    };\n    context: {\n      glSizable: { +getGLSize: () => [number, number] }\n    };\n    static displayName = `connectSize(${GLComponent.displayName ||\n      GLComponent.name ||\n      \"?\"})`;\n    static propTypes = {\n      width: PropTypes.number,\n      height: PropTypes.number\n    };\n    static contextTypes = {\n      glSizable: PropTypes.object.isRequired\n    };\n    static childContextTypes = {\n      glSizable: PropTypes.object.isRequired\n    };\n    getGLSize(): [number, number] {\n      const { props: { width, height }, context: { glSizable } } = this;\n      if (width && height) return [width, height];\n      const [cw, ch] = glSizable.getGLSize();\n      return [width || cw, height || ch];\n    }\n    getChildContext() {\n      return {\n        glSizable: this\n      };\n    }\n    render() {\n      const { onConnectSizeComponentRef } = this.props;\n      const [width, height] = this.getGLSize();\n      return (\n        <GLComponent\n          ref={onConnectSizeComponentRef}\n          {...this.props}\n          width={width}\n          height={height}\n        />\n      );\n    }\n  };\n\nexport default connectSize;\n"]}