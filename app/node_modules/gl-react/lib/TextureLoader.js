"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var noop = function noop() {};

/**
 * A texture loader is an extensible way to add more "renderable texture" into gl-react.
 */

var TextureLoader = function () {

  /**
   *
   */
  function TextureLoader(gl) {
    _classCallCheck(this, TextureLoader);

    this.gl = gl;
  }

  /**
   * You must free everything you have done and stop all pending load() calls.
   */

  /**
   * @property {WebGLRenderingContext} gl - the contextual rendering context
   */


  /**
   * Check if the loader should handle a given input
   */


  _createClass(TextureLoader, [{
    key: "load",


    /**
     * Load the resource by its input. it returns a promise and a dispose function.
     * If load() is called twice with the same input, same disposable object is expected (implementations needs to cache it).
     */
    value: function load(input) {
      // noop default implementation
      return {
        promise: new Promise(noop),
        dispose: noop
      };
    }

    /**
     * try to get in sync the texture for a given input. otherwise null.
     * If null is returned, load() can be called in order to load the resource that will later be available in a future get().
     */


    /**
     * try to get in sync the texture size for a given input. otherwise null.
     */

  }]);

  return TextureLoader;
}();

exports.default = TextureLoader;
//# sourceMappingURL=TextureLoader.js.map