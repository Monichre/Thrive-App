"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _disposable = require("./helpers/disposable");

var _TextureLoader2 = require("./TextureLoader");

var _TextureLoader3 = _interopRequireDefault(_TextureLoader2);

var _drawNDArrayTexture = require("./helpers/drawNDArrayTexture");

var _drawNDArrayTexture2 = _interopRequireDefault(_drawNDArrayTexture);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TextureLoaderNDArray = function (_TextureLoader) {
  _inherits(TextureLoaderNDArray, _TextureLoader);

  function TextureLoaderNDArray(gl) {
    _classCallCheck(this, TextureLoaderNDArray);

    var _this = _possibleConstructorReturn(this, (TextureLoaderNDArray.__proto__ || Object.getPrototypeOf(TextureLoaderNDArray)).call(this, gl));

    _this.textures = new WeakMap();
    return _this;
  }

  _createClass(TextureLoaderNDArray, [{
    key: "canLoad",
    value: function canLoad(obj) {
      return obj.shape && obj.data && obj.stride;
    }
  }, {
    key: "dispose",
    value: function dispose() {
      (0, _disposable.disposeObjectMap)(this.textures);
    }
  }, {
    key: "get",
    value: function get(array) {
      var gl = this.gl;

      var texture = this.textures.get(array);
      if (!texture) {
        texture = gl.createTexture();
        this.textures.set(array, texture);
      }
      gl.bindTexture(gl.TEXTURE_2D, texture);
      (0, _drawNDArrayTexture2.default)(gl, texture, array);
      return texture;
    }
  }, {
    key: "getSize",
    value: function getSize(array) {
      return array.shape.slice(0, 2);
    }
  }]);

  return TextureLoaderNDArray;
}(_TextureLoader3.default);

exports.default = TextureLoaderNDArray;
//# sourceMappingURL=TextureLoaderNDArray.js.map