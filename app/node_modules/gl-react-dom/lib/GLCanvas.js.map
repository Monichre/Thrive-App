{"version":3,"sources":["../src/GLCanvas.js"],"names":["invariant","require","defer","React","Component","PropTypes","raf","now","createShader","createTexture","createFBO","pool","Shaders","GLImage","vertShader","pointerEventsProperty","canvasPool","WEBGL_CONTEXT_LOST","WEBGL_CONTEXT_RESTORED","disposeFunction","o","dispose","diffCall","newMap","oldMap","f","syncShape","obj","shape","imageObjectToId","image","uri","countPreloaded","loaded","toLoad","nb","i","length","indexOf","extractShaderDebug","shader","uniforms","types","GLCanvas","props","_onContextLost","e","preventDefault","_gl","onContextLost","_onContextRestored","_poolObject","_mountPoint","forceUpdate","onContextRestored","_getFBO","fbos","_cache","_fbos","id","fbo","color","minFilter","magFilter","LINEAR","_onImageLoad","_preloading","push","loadedObj","imagesToPreload","onProgress","total","progress","_dirtyOnLoad","_requestSyncData","_handleDraw","_rafDraw","_needsSyncData","_syncData","_data","_haveRemainingToPreload","_draw","data","container","_drawCleanups","create","cache","canvas","gl","resize","width","height","pixelRatio","_canvas","Object","keys","_images","_autoredraw","autoRedraw","_pendingCaptureFrame","addEventListener","_resizeUniformContentTextures","nbContentTextures","_syncAutoRedraw","forEach","removeEventListener","_allocatedFromPool","freeUint8","setDebugProbe","_rafAutoRedraw","cancel","key","reject","Error","style","renderId","onLoad","eventsThrough","visibleContent","rest","styles","ref","_mount","config","opts","format","type","quality","promise","_addPendingCaptureFrame","_requestDraw","params","_debugProbe","onDraw","profile","capture","captureRate","lastCapture","Promise","resolve","toDataURL","toBlob","contentTextures","_contentTextures","prevShaders","_shaders","prevImages","prevStandaloneTextures","_standaloneTextures","shaders","images","standaloneTextures","traverseTree","s","dataUniforms","dataChildren","children","dataContextChildren","contextChildren","fboId","map","shaderObj","get","frag","name","attributes","_p","pointer","textures","units","uniformName","value","emptyTexture","src","getTexture","tex","ndarray","disableLinearInterpolation","notProvided","filter","u","join","_renderData","img","splice","_dispatchDrawCleanup","_needsDraw","renderData","buffer","_buffer","allocatedFromPool","debugProbe","shouldDebugCapture","shouldProfile","t","recDraw","debugNode","shaderInfos","profileExclusive","w","h","bindFramebuffer","FRAMEBUFFER","viewport","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","bind","SRC_ALPHA","bindBuffer","ARRAY_BUFFER","clearColor","clear","COLOR_BUFFER_BIT","drawArrays","TRIANGLES","profileInclusiveSum","profileInclusive","debugContents","pixels","mallocUint8","readPixels","RGBA","UNSIGNED_BYTE","contents","_getDrawingUniforms","content","_syncUniformTexture","code","parentNode","innerHTML","enable","BLEND","debugTree","disable","tree","pendingCaptureFramePerOption","_capture","then","some","n","texture","all","firstChild","loop","videoWidth","videoHeight","setPixels","propTypes","number","isRequired","object","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,IAAMA,YAAYC,QAAQ,WAAR,CAAlB;AACA,IAAMC,QAAQD,QAAQ,eAAR,CAAd;AACA,IAAME,QAAQF,QAAQ,OAAR,CAAd;IAEEG,S,GAEED,K,CAFFC,S;IACAC,S,GACEF,K,CADFE,S;;AAEF,IAAMC,MAAML,QAAQ,KAAR,CAAZ;AACA,IAAMM,MAAMN,QAAQ,iBAAR,CAAZ;AACA,IAAMO,eAAeP,QAAQ,WAAR,CAArB;AACA,IAAMQ,gBAAgBR,QAAQ,cAAR,CAAtB;AACA,IAAMS,YAAYT,QAAQ,QAAR,CAAlB;AACA,IAAMU,OAAOV,QAAQ,iBAAR,CAAb;;eACoBA,QAAQ,UAAR,C;;IAAZW,O,YAAAA,O;;AACR,IAAMC,UAAUZ,QAAQ,WAAR,CAAhB;AACA,IAAMa,aAAab,QAAQ,eAAR,CAAnB;AACA,IAAMc,wBAAwBd,QAAQ,yBAAR,CAA9B;AACA,IAAMe,aAAaf,QAAQ,cAAR,CAAnB;;AAEA,IAAMgB,qBAAqB,kBAA3B;AACA,IAAMC,yBAAyB,sBAA/B;;AAEA,IAAMC,kBAAkB,SAAlBA,eAAkB;AAAA,SAAKC,EAAEC,OAAF,EAAL;AAAA,CAAxB;;AAEA;AACA,SAASC,QAAT,CAAmBC,MAAnB,EAA2BC,MAA3B,EAAmCC,CAAnC,EAAsC;AACpC,OAAK,IAAML,CAAX,IAAgBI,MAAhB,EAAwB;AACtB,QAAI,EAAEJ,KAAKG,MAAP,CAAJ,EAAoB;AAClBE,QAAED,OAAOJ,CAAP,CAAF,EAAaA,CAAb;AACD;AACF;AACF;;AAED;AACA,SAASM,SAAT,CAAoBC,GAApB,EAAyBC,KAAzB,EAAgC;AAC9B,MAAID,IAAIC,KAAJ,CAAU,CAAV,MAAiBA,MAAM,CAAN,CAAjB,IAA6BD,IAAIC,KAAJ,CAAU,CAAV,MAAiBA,MAAM,CAAN,CAAlD,EAA4D;AAC1DD,QAAIC,KAAJ,GAAYA,KAAZ;AACD;AACF;;AAED,SAASC,eAAT,CAA0BC,KAA1B,EAAiC;AAC/B,SAAOA,MAAMC,GAAb;AACD;;AAED,SAASC,cAAT,CAAyBC,MAAzB,EAAiCC,MAAjC,EAAyC;AACvC,MAAIC,KAAK,CAAT;AACA,OAAK,IAAIC,IAAE,CAAX,EAAcA,IAAIF,OAAOG,MAAzB,EAAiCD,GAAjC,EAAsC;AACpC,QAAIH,OAAOK,OAAP,CAAeT,gBAAgBK,OAAOE,CAAP,CAAhB,CAAf,MAA6C,CAAC,CAAlD,EACED;AACH;AACD,SAAOA,EAAP;AACD;;AAED,SAASI,kBAAT,CAA6BC,MAA7B,EAAqC;AAAA,MAClBC,QADkB,GACHD,MADG,CAC3BE,KAD2B,CAClBD,QADkB;;AAEnC,SAAO,EAAEC,OAAO,EAAED,kBAAF,EAAT,EAAP;AACD;;IAEKE,Q;;;AAEJ;;AAEA,oBAAaC,KAAb,EAAoB;AAAA;;AAAA,oHACZA,KADY;;AAAA,UA+BpBC,cA/BoB,GA+BH,aAAK;AACpBC,QAAEC,cAAF;AACA,YAAKC,GAAL,GAAW,IAAX;AAFoB,UAGZC,aAHY,GAGM,MAAKL,KAHX,CAGZK,aAHY;;AAIpB,UAAIA,aAAJ,EAAmBA;AACpB,KApCmB;;AAAA,UAsCpBC,kBAtCoB,GAsCC,YAAM;AACzB,UAAI,MAAKC,WAAT,EAAsB;AACpB,cAAKA,WAAL,CAAiB9B,OAAjB;AACD;AACD,YAAK+B,WAAL,GAAmB,IAAnB;AACA,YAAKC,WAAL;AALyB,UAMjBC,iBANiB,GAMK,MAAKV,KANV,CAMjBU,iBANiB;;AAOzB,UAAIA,iBAAJ,EAAuBA;AACxB,KA9CmB;;AAAA,UA2NpBC,OA3NoB,GA2NV,cAAM;AACd,UAAMC,OAAO,MAAKC,MAAL,CAAYC,KAAzB,CADc,CACkB;AAChC1D,gBAAU2D,MAAI,CAAd,EAAiB,mCAAjB;AACA,UAAIA,MAAMH,IAAV,EAAgB;AACd,eAAOA,KAAKG,EAAL,CAAP,CADc,CACG;AAClB,OAFD,MAGK;AACH,YAAMC,MAAMlD,UAAU,MAAKsC,GAAf,EAAoB,CAAE,CAAF,EAAK,CAAL,CAApB,CAAZ;AACAY,YAAIC,KAAJ,CAAU,CAAV,EAAaC,SAAb,GACAF,IAAIC,KAAJ,CAAU,CAAV,EAAaE,SAAb,GACE,MAAKf,GAAL,CAASgB,MAFX;AAGAR,aAAKG,EAAL,IAAWC,GAAX;AACA,eAAOA,GAAP;AACD;AACF,KAzOmB;;AAAA,UAojBpBK,YApjBoB,GAojBL,qBAAa;AAC1B,YAAKC,WAAL,CAAiBC,IAAjB,CAAsBC,SAAtB;AAD0B,wBAEY,MAAKxB,KAFjB;AAAA,UAEnByB,eAFmB,eAEnBA,eAFmB;AAAA,UAEFC,UAFE,eAEFA,UAFE;;AAG1B,UAAMrC,SAASD,eAAe,MAAKkC,WAApB,EAAiCG,eAAjC,CAAf;AACA,UAAME,QAAQF,gBAAgBhC,MAA9B;AACA,UAAIiC,UAAJ,EAAgBA,WAAW;AACzBE,kBAAUvC,SAASsC,KADM;AAEzBtC,sBAFyB;AAGzBsC;AAHyB,OAAX;AAKhB,YAAKE,YAAL,GAAoB,IAApB;AACA,YAAKC,gBAAL;AACD,KAhkBmB;;AAAA,UAooBpBC,WApoBoB,GAooBN,YAAM;AAClB,aAAO,MAAKC,QAAZ;AACA,UAAI,MAAKC,cAAT,EAAyB;AACvB,YAAI;AACF,gBAAKC,SAAL,CAAe,MAAKC,KAApB;AACD,SAFD,CAGA,OAAOjC,CAAP,EAAU;AACR,cAAI,EAAE,cAAcA,CAAhB,CAAJ,EAAwB;AAAE;AACxB,kBAAMA,CAAN;AACD;AACF;AACF;AACD,UAAI,CAAC,MAAKkC,uBAAL,EAAL,EAAqC;AACnC,cAAKC,KAAL;AACD;AACF,KAnpBmB;;AAElB,UAAKF,KAAL,GAAanC,MAAMsC,IAAnB;AAFkB;AAGnB;;;;2BAEOC,S,EAAW;AACjB,WAAKC,aAAL,GAAqB,EAArB;AACA;AACA,WAAKjC,WAAL,GAAmBnC,WAAWqE,MAAX,CAAkBF,SAAlB,CAAnB;AACA,UAAI,CAAC,KAAKhC,WAAV,EAAuB;AACvB,WAAKM,MAAL,GAAc,KAAKN,WAAL,CAAiBmC,KAA/B;AALiB,wBAMc,KAAKnC,WANnB;AAAA,UAMToC,MANS,eAMTA,MANS;AAAA,UAMDC,EANC,eAMDA,EANC;AAAA,UAMGC,MANH,eAMGA,MANH;AAAA,UAOTP,IAPS,GAOA,KAAKtC,KAPL,CAOTsC,IAPS;;AAQjB,UAAIA,IAAJ,EAAUO,OAAOP,KAAKQ,KAAZ,EAAmBR,KAAKS,MAAxB,EAAgCT,KAAKU,UAArC;AACV,WAAKC,OAAL,GAAeN,MAAf;;AAEA,WAAKd,YAAL,GAAoB,IAApB;AACA,WAAKP,WAAL,GAAmB4B,OAAOC,IAAP,CAAY,KAAKtC,MAAL,CAAYuC,OAAxB,CAAnB;AACA,WAAKC,WAAL,GAAmB,KAAKrD,KAAL,CAAWsD,UAA9B;AACA,WAAKC,oBAAL,GAA4B,EAA5B;;AAEA,WAAKnD,GAAL,GAAWwC,EAAX;;AAEAD,aAAOa,gBAAP,CAAwBnF,kBAAxB,EAA4C,KAAK4B,cAAjD;AACA0C,aAAOa,gBAAP,CAAwBlF,sBAAxB,EAAgD,KAAKgC,kBAArD;;AAEA,WAAKmD,6BAAL,CAAmC,KAAKzD,KAAL,CAAW0D,iBAA9C;AACA,WAAK5B,gBAAL;AACA,WAAK6B,eAAL;AACD;;;2CAmBuB;AAAA;;AACtB,WAAKnB,aAAL,CAAmBoB,OAAnB,CAA2B;AAAA,eAAK/E,GAAL;AAAA,OAA3B;AACA,WAAK2D,aAAL,GAAqB,IAArB;AACA,UAAI,KAAKjC,WAAT,EAAsB;AAAA,YACZoC,MADY,GACD,KAAKpC,WADJ,CACZoC,MADY;;AAEpBA,eAAOkB,mBAAP,CAA2BxF,kBAA3B,EAA+C,KAAK4B,cAApD;AACA0C,eAAOkB,mBAAP,CAA2BvF,sBAA3B,EAAmD,KAAKgC,kBAAxD;AACA,aAAKC,WAAL,CAAiB9B,OAAjB;AACD;AACD,UAAI,KAAKqF,kBAAT,EAA6B;AAC3B,aAAKA,kBAAL,CAAwBF,OAAxB,CAAgC7F,KAAKgG,SAArC;AACD;AACD,WAAKC,aAAL,CAAmB,IAAnB;AACA,WAAKxD,WAAL,GAAmB,IAAnB;AACA,WAAKyC,OAAL,GAAe,IAAf;AACA,WAAK7C,GAAL,GAAW,IAAX;AACA,WAAKS,MAAL,GAAc,IAAd;AACA,UAAI,KAAKoD,cAAT,EAAyBvG,IAAIwG,MAAJ,CAAW,KAAKD,cAAhB;AACzB,UAAI,KAAKjC,QAAT,EAAmBtE,IAAIwG,MAAJ,CAAW,KAAKlC,QAAhB;AACnBkB,aAAOC,IAAP,CAAY,KAAKI,oBAAjB,EAAuCK,OAAvC,CAA+C,eAAO;AACpD,eAAKL,oBAAL,CAA0BY,GAA1B,EAA+BC,MAA/B,CAAsC,IAAIC,KAAJ,CAAU,wBAAV,CAAtC;AACD,OAFD;AAGA,WAAKd,oBAAL,GAA4B,IAA5B;AACD;;;8CAE0BvD,K,EAAO;AAChC;AACA,UAAIA,MAAM0D,iBAAN,KAA4B,KAAK1D,KAAL,CAAW0D,iBAA3C,EACE,KAAKD,6BAAL,CAAmCzD,MAAM0D,iBAAzC;;AAEF,UAAI1D,MAAMsC,IAAN,KAAe,KAAKtC,KAAL,CAAWsC,IAA9B,EAAoC;AAClC,aAAKH,KAAL,GAAanC,MAAMsC,IAAnB;AACA,aAAKR,gBAAL;AACD;;AAED,WAAKuB,WAAL,GAAmBrD,MAAMsD,UAAzB;AACA,WAAKK,eAAL;AACD;;;0CAEsB;AACrB,UAAI,KAAKpD,WAAT,EAAsB;AAAA,YACZ+B,IADY,GACH,KAAKtC,KADF,CACZsC,IADY;;AAEpB,YAAIA,IAAJ,EAAU,KAAK/B,WAAL,CAAiBsC,MAAjB,CAAwBP,KAAKQ,KAA7B,EAAoCR,KAAKS,MAAzC,EAAiDT,KAAKU,UAAtD;AACX;AACF;;;6BAES;AAAA;AAAA;;AAAA,mBAIJ,KAAKhD,KAJD;AAAA,UACA8C,KADA,UACAA,KADA;AAAA,UACOC,MADP,UACOA,MADP;AAAA,UAENC,UAFM,UAENA,UAFM;AAAA,UAEMsB,KAFN,UAEMA,KAFN;AAAA,UAEahC,IAFb,UAEaA,IAFb;AAAA,UAEmBoB,iBAFnB,UAEmBA,iBAFnB;AAAA,UAEsCjC,eAFtC,UAEsCA,eAFtC;AAAA,UAEuD8C,QAFvD,UAEuDA,QAFvD;AAAA,UAEiEC,MAFjE,UAEiEA,MAFjE;AAAA,UAEyE9C,UAFzE,UAEyEA,UAFzE;AAAA,UAEqF4B,UAFrF,UAEqFA,UAFrF;AAAA,UAEiGmB,aAFjG,UAEiGA,aAFjG;AAAA,UAEgHC,cAFhH,UAEgHA,cAFhH;;AAAA,UAGHC,IAHG;;AAKR,UAAMC,sBACDN,KADC;AAEJxB,eAAOA,QAAM,IAFT;AAGJC,gBAAQA,SAAO;AAHX,oCAIH5E,qBAJG,EAIqBsG,gBAAgB,MAAhB,GAAyB,MAJ9C,0CAKM,UALN,yCAMK,cANL,cAAN;AAQA,aAAO,wCACDE,IADC;AAEL,aAAK,mBAAO;AACV,cAAIE,QAAO,CAAC,OAAKrE,WAAjB,EAA8B;AAC5B,mBAAKsE,MAAL,CAAY,OAAKtE,WAAL,GAAmBqE,IAA/B;AACD;AACF,SANI;AAOL,eAAOD;AAPF,SAAP;AASD;;AAED;;;;iCAEcG,M,EAAQ;AACpB,UAAIC,aAAJ;AACA,UAAID,MAAJ,EAAY;AACV3H,kBAAU,QAAO2H,MAAP,yCAAOA,MAAP,OAAgB,QAA1B,EAAoC,kDAApC;AACA,YAAIxF,KAAK,CAAT;AACA,YAAI,YAAYwF,MAAhB,EAAwB;AACtB3H,oBACE,OAAO2H,OAAOE,MAAd,KAAyB,QAD3B,EAEE,oFAFF,EAGEF,OAAOE,MAHT;AAIA1F;AACD;AACD,YAAI,UAAUwF,MAAd,EAAsB;AACpB3H,oBACE,OAAO2H,OAAOG,IAAd,KAAuB,QADzB,EAEE,4EAFF,EAGEH,OAAOG,IAHT;AAIA3F;AACD;AACD,YAAI,aAAawF,MAAjB,EAAyB;AACvB3H,oBACE,OAAO2H,OAAOI,OAAd,KAA0B,QAA1B,IACAJ,OAAOI,OAAP,IAAkB,CADlB,IAEAJ,OAAOI,OAAP,IAAkB,CAHpB,EAIE,8EAJF,EAKEJ,OAAOI,OALT;AAMA5F;AACD;AACD,YAAM4D,OAAOD,OAAOC,IAAP,CAAY4B,MAAZ,CAAb;AACA3H,kBAAU+F,KAAK1D,MAAL,KAAgBF,EAA1B,EAA8B,0GAA9B,EAA0I4D,IAA1I;AACA6B,eAAOD,MAAP;AACD;AACDC;AACEC,gBAAQ,QADV;AAEEC,cAAM,KAFR;AAGEC,iBAAS;AAHX,SAIKH,IAJL;AAMA,UAAMI,UAAU,KAAKC,uBAAL,CAA6BL,IAA7B,EAAmCI,OAAnD;AACA,WAAKE,YAAL;AACA,aAAOF,OAAP;AACD;;;kCAEcG,M,EAAQ;AACrB;AACA,UAAI,KAAKC,WAAT,EAAsB;AACpB,aAAKA,WAAL,GAAmB,IAAnB;AACD;AACD,UAAID,MAAJ,EAAY;AACVnI,kBAAU,OAAOmI,OAAOE,MAAd,KAAyB,UAAnC,EAA+C,iDAA/C;AACAF;AACEG,mBAAS,IADX;AAEEC,mBAAS,IAFX;AAGEC,uBAAa,CAHf,IAKKL,MALL;AAOA,aAAKC,WAAL,gBACKD,MADL;AAEEM,uBAAa;AAFf;AAIA,aAAKP,YAAL;AACD;AACF;;;mCAEetF,K,EAAO;AACrB,UAAI,UAAUA,KAAV,IAAmBA,MAAMsC,IAAN,KAAe,KAAKH,KAA3C,EAAkD;AAChD,aAAKA,KAAL,GAAanC,MAAMsC,IAAnB;AACA,aAAKR,gBAAL;AACD;AACF;;;kCAEc;AACb,WAAKwD,YAAL;AACD;;AAED;;;;4CAEyBN,I,EAAM;AAC7B,UAAMb,MAAMa,KAAKC,MAAL,GAAc,GAAd,GAAoBD,KAAKE,IAAzB,GAAgC,GAAhC,GAAsCF,KAAKG,OAAvD;AACA,aAAO,KAAK5B,oBAAL,CAA0BY,GAA1B,MACL,KAAKZ,oBAAL,CAA0BY,GAA1B,iBAAsC7G,OAAtC,IAA+C0H,UAA/C,GADK,CAAP;AAGD;;;oCAEoC;AAAA,UAAzBC,MAAyB,SAAzBA,MAAyB;AAAA,UAAjBC,IAAiB,SAAjBA,IAAiB;AAAA,UAAXC,OAAW,SAAXA,OAAW;;AACnC,UAAMxC,SAAS,KAAKM,OAApB;AACA,UAAI;AACF,gBAAQgC,MAAR;AACA,eAAK,QAAL;AAAe,mBAAOa,QAAQC,OAAR,CAAgBpD,OAAOqD,SAAP,CAAiBd,IAAjB,EAAuBC,OAAvB,CAAhB,CAAP;AACf,eAAK,MAAL;AAAa,mBAAO,IAAIW,OAAJ,CAAY;AAAA,qBAAWnD,OAAOsD,MAAP,CAAcF,OAAd,EAAuBb,IAAvB,EAA6BC,OAA7B,CAAX;AAAA,aAAZ,CAAP;AACb;AAAS/H,sBAAU,KAAV,EAAiB,6BAAjB,EAAgD6H,MAAhD;AAHT;AAKD,OAND,CAOA,OAAO/E,CAAP,EAAU;AACR,eAAO4F,QAAQ1B,MAAR,CAAelE,CAAf,CAAP;AACD;AACF;;;8BAkBUoC,I,EAAM;AAAA;;AACf;AACA,UAAMM,KAAK,KAAKxC,GAAhB;AACA,UAAI,CAACwC,EAAL,EAAS;;AAET,UAAMvB,eAAe,KAAKA,YAA1B;AACA,UAAM6E,kBAAkB,KAAKrF,MAAL,CAAYsF,gBAApC;AACA,UAAMxF,UAAU,KAAKA,OAArB;;AAEA;AACA,UAAMyF,cAAc,KAAKvF,MAAL,CAAYwF,QAAhC;AACA,UAAMC,aAAa,KAAKzF,MAAL,CAAYuC,OAA/B;AACA,UAAMmD,yBAAyB,KAAK1F,MAAL,CAAY2F,mBAA3C;;AAEA;AACA,UAAMC,UAAU,EAAhB,CAfe,CAeK;AACpB,UAAMC,SAAS,EAAf,CAhBe,CAgBI;AACnB,UAAMC,qBAAqB,EAA3B;;AAEA;AACA;AACA,eAASC,YAAT,CAAuBtE,IAAvB,EAA6B;AAAA,YAEjBuE,CAFiB,GAUvBvE,IAVuB,CAEzB1C,MAFyB;AAAA,YAGfkH,YAHe,GAUvBxE,IAVuB,CAGzBzC,QAHyB;AAAA,YAIfkH,YAJe,GAUvBzE,IAVuB,CAIzB0E,QAJyB;AAAA,YAKRC,mBALQ,GAUvB3E,IAVuB,CAKzB4E,eALyB;AAAA,YAMzBpE,KANyB,GAUvBR,IAVuB,CAMzBQ,KANyB;AAAA,YAOzBC,MAPyB,GAUvBT,IAVuB,CAOzBS,MAPyB;AAAA,YAQzBC,UARyB,GAUvBV,IAVuB,CAQzBU,UARyB;AAAA,YASzBmE,KATyB,GAUvB7E,IAVuB,CASzB6E,KATyB;;;AAY3B,YAAMD,kBAAkBD,oBAAoBG,GAApB,CAAwBR,YAAxB,CAAxB;;AAEA;AACA;AACA,YAAMI,WAAWD,aAAaK,GAAb,CAAiBR,YAAjB,CAAjB;;AAEA;AACA,YAAIhH,eAAJ;AACA,YAAIiH,KAAKJ,OAAT,EAAkB;AAChB7G,mBAAS6G,QAAQI,CAAR,CAAT,CADgB,CACK;AACtB,SAFD,MAGK,IAAIA,KAAKT,WAAT,EAAsB;AACzBxG,mBAAS6G,QAAQI,CAAR,IAAaT,YAAYS,CAAZ,CAAtB,CADyB,CACa;AACvC,SAFI,MAGA;AACH;AACA,cAAMQ,YAAYrJ,QAAQsJ,GAAR,CAAYT,CAAZ,CAAlB;AACAzJ,oBAAUiK,SAAV,EAAqB,4BAArB,EAAmDR,CAAnD;AACAjH,mBAAShC,aAAagF,EAAb,EAAiB1E,UAAjB,EAA6BmJ,UAAUE,IAAvC,CAAT;AACA3H,iBAAO4H,IAAP,GAAcH,UAAUG,IAAxB;AACA5H,iBAAO6H,UAAP,CAAkBC,EAAlB,CAAqBC,OAArB;AACAlB,kBAAQI,CAAR,IAAajH,MAAb;AACD;;AAED;AACA,YAAIC,WAAW,EAAf,CArC2B,CAqCR;AACnB,YAAI+H,WAAW,EAAf,CAtC2B,CAsCR;AACnB,YAAIC,QAAQ,CAAZ,CAvC2B,CAuCZ;AACf,aAAK,IAAMC,WAAX,IAA0BhB,YAA1B,EAAwC;AACtC,cAAMiB,QAAQjB,aAAagB,WAAb,CAAd;AACA,cAAM5C,OAAOtF,OAAOE,KAAP,CAAaD,QAAb,CAAsBiI,WAAtB,CAAb;;AAEA1K,oBAAU8H,IAAV,EAAgB,+CAAhB,EAAiEtF,OAAO4H,IAAxE,EAA8EM,WAA9E;;AAEA,cAAI5C,SAAS,WAAT,IAAwBA,SAAS,aAArC,EAAoD;AAClD;AACArF,qBAASiI,WAAT,IAAwBD,OAAxB,CAFkD,CAEhB;AAClC,gBAAI,CAACE,KAAL,EAAY;AACV,kBAAMC,eAAenK,cAAc+E,EAAd,EAAkB,CAAE,CAAF,EAAK,CAAL,CAAlB,CAArB,CADU,CACwC;AAClDgF,uBAASE,WAAT,IAAwBE,YAAxB;AACArB,iCAAmBpF,IAAnB,CAAwByG,YAAxB;AACD,aAJD,MAKK,QAAQD,MAAM7C,IAAd;AACL,mBAAK,SAAL;AAAgB;AACd0C,yBAASE,WAAT,IAAwB5B,gBAAgB6B,MAAMhH,EAAtB,CAAxB;AACA;;AAEF,mBAAK,KAAL;AAAY;AAAE;AACZ,sBAAMC,MAAML,QAAQoH,MAAMhH,EAAd,CAAZ;AACA6G,2BAASE,WAAT,IAAwB9G,IAAIC,KAAJ,CAAU,CAAV,CAAxB;AACA;AACD;;AAED,mBAAK,KAAL;AAAY;AACV,sBAAMgH,MAAMF,MAAM5I,GAAlB;AACA/B,4BAAU6K,OAAO,OAAOA,GAAP,KAAe,QAAhC,EAA0C,uDAA1C,EAAmGrI,OAAO4H,IAA1G,EAAgHM,WAAhH;AACA,sBAAI5I,cAAJ;AACA,sBAAI+I,OAAOvB,MAAX,EAAmB;AACjBxH,4BAAQwH,OAAOuB,GAAP,CAAR;AACD,mBAFD,MAGK,IAAIA,OAAO3B,UAAX,EAAuB;AAC1BpH,4BAAQwH,OAAOuB,GAAP,IAAc3B,WAAW2B,GAAX,CAAtB;AACD,mBAFI,MAGA;AACH/I,4BAAQ,IAAIjB,OAAJ,CAAY2E,EAAZ,EAAgBvB,YAAhB,CAAR;AACAqF,2BAAOuB,GAAP,IAAc/I,KAAd;AACD;AACDA,wBAAM+I,GAAN,GAAYA,GAAZ,CAdU,CAcO;AACjBL,2BAASE,WAAT,IAAwB5I,MAAMgJ,UAAN,EAAxB,CAfU,CAekC;AAC5C;AACD;;AAED,mBAAK,SAAL;AAAgB;AACd,sBAAMC,MAAMtK,cAAc+E,EAAd,EAAkBmF,MAAMK,OAAxB,CAAZ;AACA,sBAAMpD,OAAO+C,MAAM/C,IAAN,IAAc,EAA3B,CAFc,CAEiB;AAC/B,sBAAI,CAACA,KAAKqD,0BAAV,EACEF,IAAIjH,SAAJ,GAAgBiH,IAAIhH,SAAJ,GAAgByB,GAAGxB,MAAnC;AACFwG,2BAASE,WAAT,IAAwBK,GAAxB;AACAxB,qCAAmBpF,IAAnB,CAAwB4G,GAAxB;AACA;AACD;;AAED;AACE/K,0BAAU,KAAV,EAAiB,sDAAjB,EAAyEwC,OAAO4H,IAAhF,EAAsFM,WAAtF,EAAmGC,MAAM7C,IAAzG;AAzCG;AA2CN,WAnDD,MAoDK;AACH;AACArF,qBAASiI,WAAT,IAAwBC,KAAxB;AACD;AACF;;AAED,YAAMO,cAAcpF,OAAOC,IAAP,CAAYvD,OAAOC,QAAnB,EAA6B0I,MAA7B,CAAoC;AAAA,iBAAK,EAAEC,KAAK3I,QAAP,CAAL;AAAA,SAApC,CAApB;AACAzC,kBAAUkL,YAAY7I,MAAZ,KAAqB,CAA/B,EAAkC,mEAAiE6I,YAAYG,IAAZ,CAAiB,MAAjB,CAAjE,GAA0F,GAA5H,EAAiI7I,OAAO4H,IAAxI;;AAEA,eAAO,EAAE5H,cAAF,EAAUC,kBAAV,EAAoB+H,kBAApB,EAA8BZ,kBAA9B,EAAwCE,gCAAxC,EAAyDpE,YAAzD,EAAgEC,cAAhE,EAAwEC,sBAAxE,EAAoFmE,YAApF,EAA2F7E,UAA3F,EAAP;AACD;;AAED,WAAKoG,WAAL,GAAmB9B,aAAatE,IAAb,CAAnB;;AAEA5D,eAASgI,MAAT,EAAiBJ,UAAjB,EAA6B,UAACqC,GAAD,EAAMV,GAAN,EAAc;AACzC,YAAMzI,IAAI,OAAK8B,WAAL,CAAiB5B,OAAjB,CAAyBuI,GAAzB,CAAV;AACA,YAAIzI,MAAM,CAAC,CAAX,EAAc,OAAK8B,WAAL,CAAiBsH,MAAjB,CAAwBpJ,CAAxB,EAA2B,CAA3B;AACf,OAHD;AAIA;AACA,WAAKqJ,oBAAL,CAA0B,YAAM;AAC9BnK,iBAAS+H,OAAT,EAAkBL,WAAlB,EAA+B7H,eAA/B;AACAG,iBAASgI,MAAT,EAAiBJ,UAAjB,EAA6B/H,eAA7B;AACAgI,+BAAuB3C,OAAvB,CAA+BrF,eAA/B;AACD,OAJD;;AAMA,WAAKsC,MAAL,CAAYwF,QAAZ,GAAuBI,OAAvB;AACA,WAAK5F,MAAL,CAAYuC,OAAZ,GAAsBsD,MAAtB;AACA,WAAK7F,MAAL,CAAY2F,mBAAZ,GAAkCG,kBAAlC;;AAEA,WAAK1E,cAAL,GAAsB,KAAtB;AACD;;;yCAEqBpD,C,EAAG;AACvB,WAAK2D,aAAL,CAAmBjB,IAAnB,CAAwB1C,CAAxB;AACD;;;4BAEQ;AAAA;;AACP,WAAKiK,UAAL,GAAkB,KAAlB;AACA,UAAMlG,KAAK,KAAKxC,GAAhB;AACA,UAAM2I,aAAa,KAAKL,WAAxB;AACA,UAAI,CAAC9F,EAAD,IAAO,CAACmG,UAAZ,EAAwB;AACxB,UAAMpI,UAAU,KAAKA,OAArB;AACA,UAAMqI,SAAS,KAAKnI,MAAL,CAAYoI,OAA3B;;AAEA,UAAMC,oBAAoB,EAA1B;AACA,UAAMC,aAAa,KAAK3D,WAAxB;AACA,UAAI4D,qBAAqB,KAAzB;AAAA,UAAgCC,gBAAgB,KAAhD;AACA,UAAIF,UAAJ,EAAgB;AACd,YAAIA,WAAWxD,OAAf,EAAwB;AACtB,cAAM2D,IAAI3L,KAAV;AACA,cAAI2L,IAAIH,WAAWtD,WAAf,GAA6BsD,WAAWvD,WAA5C,EAAyD;AACvDuD,uBAAWtD,WAAX,GAAyByD,CAAzB;AACAF,iCAAqB,IAArB;AACD;AACF;AACDC,wBAAgBF,WAAWzD,OAA3B;AACD;;AAED,eAAS6D,OAAT,CAAkBR,UAAlB,EAA8B;AAAA,YACpBnJ,MADoB,GAC8EmJ,UAD9E,CACpBnJ,MADoB;AAAA,YACZC,QADY,GAC8EkJ,UAD9E,CACZlJ,QADY;AAAA,YACF+H,QADE,GAC8EmB,UAD9E,CACFnB,QADE;AAAA,YACQZ,QADR,GAC8E+B,UAD9E,CACQ/B,QADR;AAAA,YACkBE,eADlB,GAC8E6B,UAD9E,CACkB7B,eADlB;AAAA,YACmCpE,KADnC,GAC8EiG,UAD9E,CACmCjG,KADnC;AAAA,YAC0CC,MAD1C,GAC8EgG,UAD9E,CAC0ChG,MAD1C;AAAA,YACkDC,UADlD,GAC8E+F,UAD9E,CACkD/F,UADlD;AAAA,YAC8DmE,KAD9D,GAC8E4B,UAD9E,CAC8D5B,KAD9D;AAAA,YACqE7E,IADrE,GAC8EyG,UAD9E,CACqEzG,IADrE;;;AAG5B,YAAMkH,YAAYL,0BAAkB7G,IAAlB,IAAwBmH,aAAa9J,mBAAmBC,MAAnB,CAArC,MAAoE,EAAtF;AACA,YAAI8J,yBAAJ;;AAEA,YAAMC,IAAI7G,QAAQE,UAAlB;AAAA,YAA8B4G,IAAI7G,SAASC,UAA3C;;AAEA;AACAwG,kBAAUtC,eAAV,GAA4BA,gBAAgBE,GAAhB,CAAoBmC,OAApB,CAA5B;;AAEA;AACAC,kBAAUxC,QAAV,GAAqBA,SAASI,GAAT,CAAamC,OAAb,CAArB;;AAEA,YAAIF,aAAJ,EAAmB;AACjBK,6BAAmB/L,KAAnB;AACD;;AAED,YAAIqD,YAAJ;AACA,YAAImG,UAAU,CAAC,CAAf,EAAkB;AAChB;AACAvE,aAAGiH,eAAH,CAAmBjH,GAAGkH,WAAtB,EAAmC,IAAnC;AACAlH,aAAGmH,QAAH,CAAY,CAAZ,EAAe,CAAf,EAAkBJ,CAAlB,EAAqBC,CAArB;AACAhH,aAAGoH,SAAH,CAAapH,GAAGqH,GAAhB,EAAqBrH,GAAGsH,mBAAxB;AACD,SALD,MAMK;AACH;AACAlJ,gBAAML,QAAQwG,KAAR,CAAN;AACArI,oBAAUkC,GAAV,EAAe,CAAE2I,CAAF,EAAKC,CAAL,CAAf;AACA5I,cAAImJ,IAAJ;AACAvH,aAAGoH,SAAH,CAAapH,GAAGwH,SAAhB,EAA2BxH,GAAGsH,mBAA9B;AACD;;AAED;AACAtK,eAAOuK,IAAP;AACAvH,WAAGyH,UAAH,CAAczH,GAAG0H,YAAjB,EAA+BtB,MAA/B;;AAEA;AACA,aAAK,IAAMlB,WAAX,IAA0BF,QAA1B,EAAoC;AAClCA,mBAASE,WAAT,EAAsBqC,IAAtB,CAA2BtK,SAASiI,WAAT,CAA3B;AACD;;AAED;AACA,aAAK,IAAMA,YAAX,IAA0BjI,QAA1B,EAAoC;AAClCD,iBAAOC,QAAP,CAAgBiI,YAAhB,IAA+BjI,SAASiI,YAAT,CAA/B;AACD;;AAED;AACAlF,WAAG2H,UAAH,CAAc,GAAd,EAAmB,GAAnB,EAAwB,GAAxB,EAA6B,GAA7B;AACA3H,WAAG4H,KAAH,CAAS5H,GAAG6H,gBAAZ;AACA7H,WAAG8H,UAAH,CAAc9H,GAAG+H,SAAjB,EAA4B,CAA5B,EAA+B,CAA/B;;AAGA,YAAItB,aAAJ,EAAmB;AACjBK,6BAAmB/L,QAAQ+L,gBAA3B;AACA,cAAIkB,sBAAsB,CAA1B;AACApB,oBAAUtC,eAAV,CAA0BtD,OAA1B,CAAkC,iBAA0B;AAAA,gBAAvBiH,gBAAuB,SAAvBA,gBAAuB;;AAC1DD,mCAAuBC,gBAAvB;AACD,WAFD;AAGArB,oBAAUxC,QAAV,CAAmBpD,OAAnB,CAA2B,iBAA0B;AAAA,gBAAvBiH,gBAAuB,SAAvBA,gBAAuB;;AACnDD,mCAAuBC,gBAAvB;AACD,WAFD;AAGA3H,iBAAOC,IAAP,CAAYb,KAAKzC,QAAjB,EAA2B+D,OAA3B,CAAmC,eAAO;AACxC,gBAAMmE,QAAQzF,KAAKzC,QAAL,CAAcsE,GAAd,CAAd;AACA,gBAAI,QAAO4D,KAAP,yCAAOA,KAAP,OAAiB,QAAjB,IAA6BA,MAAM7C,IAAN,KAAe,SAAhD,EACE0F,uBAAuBE,cAAc/C,MAAMhH,EAApB,EAAwB2I,gBAA/C;AACH,WAJD;AAKAF,oBAAUE,gBAAV,GAA6BA,gBAA7B;AACAF,oBAAUqB,gBAAV,GAA6BD,sBAAsBlB,gBAAnD;AACD;;AAED,YAAIN,kBAAJ,EAAwB;AACtB,cAAI2B,SAAShN,KAAKiN,WAAL,CAAiBrB,IAAIC,CAAJ,GAAQ,CAAzB,CAAb;AACAV,4BAAkB3H,IAAlB,CAAuBwJ,MAAvB;AACAnI,aAAGqI,UAAH,CAAc,CAAd,EAAiB,CAAjB,EAAoBtB,CAApB,EAAuBC,CAAvB,EAA0BhH,GAAGsI,IAA7B,EAAmCtI,GAAGuI,aAAtC,EAAqDJ,MAArD;AACAvB,oBAAU7D,OAAV,GAAoB,EAAEoF,cAAF,EAAUjI,OAAO6G,CAAjB,EAAoB5G,QAAQ6G,CAA5B,EAApB;AACD;;AAED,eAAOJ,SAAP;AACD;;AAED;AACA,UAAM4B,WAAW,KAAKC,mBAAL,EAAjB;AACA,UAAMnF,kBAAkB,KAAKrF,MAAL,CAAYsF,gBAApC;AACA,UAAM2E,gBAAgBM,SAAShE,GAAT,CAAa,UAACkE,OAAD,EAAU9L,CAAV,EAAgB;AACjD,YAAIkG,gBAAJ;AACA,YAAI2D,aAAJ,EAAmB;AACjB3D,oBAAU/H,KAAV;AACD;AACD,eAAK4N,mBAAL,CAAyBrF,gBAAgB1G,CAAhB,CAAzB,EAA6C8L,OAA7C;AACA,YAAIjC,aAAJ,EAAmB;AACjB3D,oBAAU/H,QAAQ+H,OAAlB;AACD;AACD,YAAIyD,UAAJ,EAAgB;AACd,cAAIxD,gBAAJ;AACA,cAAIyD,kBAAJ,EAAwB;AACtBzD,sBAAU2F,OAAV,CADsB,CACH;AACpB;AACD,iBAAO;AACLE,kBAAMF,QAAQG,UAAR,CAAmBC,SADpB;AAEL/F,4BAFK;AAGL+D,8BAAkBhE,OAHb;AAILmF,8BAAkBnF;AAJb,WAAP;AAMD;AACF,OArBqB,CAAtB;;AAuBA;;AAEA9C,SAAG+I,MAAH,CAAU/I,GAAGgJ,KAAb;AACA,UAAMC,YAAYtC,QAAQR,UAAR,CAAlB;AACAnG,SAAGkJ,OAAH,CAAWlJ,GAAGgJ,KAAd;;AAEA,UAAI,KAAKpJ,aAAL,CAAmB/C,MAAnB,GAA4B,CAAhC,EAAmC;AACjC,aAAK+C,aAAL,CAAmBoB,OAAnB,CAA2B;AAAA,iBAAK/E,GAAL;AAAA,SAA3B;AACA,aAAK2D,aAAL,GAAqB,EAArB;AACD;;AAED,UAAI2G,UAAJ,EAAgB;AACd,YAAI,KAAKrF,kBAAT,EAA6B;AAC3B,eAAKA,kBAAL,CAAwBF,OAAxB,CAAgC7F,KAAKgG,SAArC;AACD;AACD,aAAKD,kBAAL,GAA0BoF,iBAA1B;AACAC,mBAAW1D,MAAX,CAAkB;AAChBsG,gBAAMF,SADU;AAEhBT,oBAAUN,aAFM;AAGhB9M;AAHgB,SAAlB;AAKD;;AAED,UAAMuF,uBAAuB,KAAKA,oBAAlC;AACA,UAAMyI,+BAA+B9I,OAAOC,IAAP,CAAYI,oBAAZ,CAArC;AACA,UAAIyI,6BAA6BvM,MAA7B,GAAsC,CAA1C,EAA6C;AAC3CuM,qCAA6BpI,OAA7B,CAAqC,eAAO;AAAA,sCACVL,qBAAqBY,GAArB,CADU;AAAA,cACnCa,IADmC,yBACnCA,IADmC;AAAA,cAC7Be,OAD6B,yBAC7BA,OAD6B;AAAA,cACpB3B,MADoB,yBACpBA,MADoB;;AAE1C,iBAAK6H,QAAL,CAAcjH,IAAd,EAAoBkH,IAApB,CAAyBnG,OAAzB,EAAkC3B,MAAlC;AACD,SAHD;AAIA,aAAKb,oBAAL,GAA4B,EAA5B;AACD;;AAED,UAAI,KAAK1B,YAAL,IAAqB,CAAC,KAAKO,uBAAL,EAA1B,EAA0D;AACxD,aAAKP,YAAL,GAAoB,KAApB;AACA,YAAI,KAAK7B,KAAL,CAAWwE,MAAf,EAAuB;AACrB,eAAKxE,KAAL,CAAWwE,MAAX;AACD;AACF;AACF;;;8CAE0B;AAAA;;AACzB,aAAO,KAAKxE,KAAL,CAAWyB,eAAX,CAA2B0K,IAA3B,CAAgC;AAAA,eAAK,OAAK7K,WAAL,CAAiB5B,OAAjB,CAAyBT,gBAAgBT,CAAhB,CAAzB,MAAiD,CAAC,CAAvD;AAAA,OAAhC,CAAP;AACD;;;kDAgB8B4N,C,EAAG;AAAE;AAClC,UAAMxJ,KAAK,KAAKxC,GAAhB;AACA,UAAM8F,kBAAkB,KAAKrF,MAAL,CAAYsF,gBAApC;AACA,UAAM1G,SAASyG,gBAAgBzG,MAA/B;AACA,UAAIA,WAAW2M,CAAf,EAAkB;AAClB,UAAIA,IAAI3M,MAAR,EAAgB;AACd,aAAK,IAAID,IAAI4M,CAAb,EAAgB5M,IAAIC,MAApB,EAA4BD,GAA5B,EAAiC;AAC/B0G,0BAAgB1G,CAAhB,EAAmBf,OAAnB;AACD;AACDyH,wBAAgBzG,MAAhB,GAAyB2M,CAAzB;AACD,OALD,MAMK;AACH,aAAK,IAAI5M,KAAI0G,gBAAgBzG,MAA7B,EAAqCD,KAAI4M,CAAzC,EAA4C5M,IAA5C,EAAiD;AAC/C,cAAM6M,UAAUxO,cAAc+E,EAAd,EAAkB,CAAE,CAAF,EAAK,CAAL,CAAlB,CAAhB;AACAyJ,kBAAQnL,SAAR,GAAoBmL,QAAQlL,SAAR,GAAoByB,GAAGxB,MAA3C;AACA8E,0BAAgB3E,IAAhB,CAAqB8K,OAArB;AACD;AACF;AACF;;;0CAEsB;AAAA,UACd3I,iBADc,GACO,KAAK1D,KADZ,CACd0D,iBADc;;AAErB,UAAIA,sBAAsB,CAA1B,EAA6B,OAAO,EAAP;AAC7B,UAAMsD,WAAW,KAAKxG,WAAL,CAAiBiL,UAAjB,CAA4BzE,QAA7C;AACA,UAAMsF,MAAM,EAAZ;AACA,WAAK,IAAI9M,IAAI,CAAb,EAAgBA,IAAIkE,iBAApB,EAAuClE,GAAvC,EAA4C;AAC1C8M,YAAI9M,CAAJ,IAASwH,SAASxH,CAAT,EAAY+M,UAArB;AACD;AACD,aAAOD,GAAP;AACD;;;sCAEkB;AAAA;;AACjB,UAAI,CAAC,KAAKjJ,WAAN,IAAqB,KAAKY,cAA9B,EAA8C;AAC9C,UAAMuI,OAAO,SAAPA,IAAO,GAAM;AACjB,YAAI,CAAC,OAAKnJ,WAAV,EAAuB;AACrB,iBAAO,OAAKY,cAAZ;AACA;AACD;AACD,eAAKA,cAAL,GAAsBvG,IAAI8O,IAAJ,CAAtB;AACA,eAAKnK,KAAL;AACD,OAPD;AAQA,WAAK4B,cAAL,GAAsBvG,IAAI8O,IAAJ,CAAtB;AACD;;;wCAEoBH,O,EAASf,O,EAAS;AACrC,UAAMxI,QAAQwI,QAAQxI,KAAR,IAAiBwI,QAAQmB,UAAvC;AACA,UAAM1J,SAASuI,QAAQvI,MAAR,IAAkBuI,QAAQoB,WAAzC;AACA,UAAI5J,SAASC,MAAb,EAAqB;AAAE;AACrBjE,kBAAUuN,OAAV,EAAmB,CAAEvJ,KAAF,EAASC,MAAT,CAAnB;AACAsJ,gBAAQM,SAAR,CAAkBrB,OAAlB;AACD,OAHD,MAIK;AACHe,gBAAQrN,KAAR,GAAgB,CAAE,CAAF,EAAK,CAAL,CAAhB;AACD;AACF;;;uCAEmB;AAClB,WAAKiD,cAAL,GAAsB,IAAtB;AACA,WAAKqD,YAAL;AACD;;;mCAEe;AACd,UAAI,KAAKtD,QAAT,EAAmB;AACnB,WAAKA,QAAL,GAAgBtE,IAAI,KAAKqE,WAAT,CAAhB;AACD;;;;EAtoBoBvE,S;;AA4pBvBuC,SAAS6M,SAAT,GAAqB;AACnB9J,SAAOrF,UAAUoP,MAAV,CAAiBC,UADL;AAEnB/J,UAAQtF,UAAUoP,MAAV,CAAiBC,UAFN;AAGnB9J,cAAYvF,UAAUoP,MAAV,CAAiBC,UAHV;AAInBxK,QAAM7E,UAAUsP,MAAV,CAAiBD,UAJJ;AAKnBpJ,qBAAmBjG,UAAUoP,MAAV,CAAiBC;AALjB,CAArB;;AAQAE,OAAOC,OAAP,GAAiBlN,QAAjB","file":"GLCanvas.js","sourcesContent":["const invariant = require(\"invariant\");\nconst defer = require(\"promise-defer\");\nconst React = require(\"react\");\nconst {\n  Component,\n  PropTypes\n} = React;\nconst raf = require(\"raf\");\nconst now = require(\"performance-now\");\nconst createShader = require(\"gl-shader\");\nconst createTexture = require(\"gl-texture2d\");\nconst createFBO = require(\"gl-fbo\");\nconst pool = require(\"typedarray-pool\");\nconst { Shaders } = require(\"gl-react\");\nconst GLImage = require(\"./GLImage\");\nconst vertShader = require(\"./static.vert\");\nconst pointerEventsProperty = require(\"./pointerEventsProperty\");\nconst canvasPool = require(\"./canvasPool\");\n\nconst WEBGL_CONTEXT_LOST = \"webglcontextlost\";\nconst WEBGL_CONTEXT_RESTORED = \"webglcontextrestored\";\n\nconst disposeFunction = o => o.dispose();\n\n// call f(obj, key) on all objects that have disappeared from oldMap to newMap\nfunction diffCall (newMap, oldMap, f) {\n  for (const o in oldMap) {\n    if (!(o in newMap)) {\n      f(oldMap[o], o);\n    }\n  }\n}\n\n// set obj.shape only if it has changed\nfunction syncShape (obj, shape) {\n  if (obj.shape[0] !== shape[0] || obj.shape[1] !== shape[1]) {\n    obj.shape = shape;\n  }\n}\n\nfunction imageObjectToId (image) {\n  return image.uri;\n}\n\nfunction countPreloaded (loaded, toLoad) {\n  let nb = 0;\n  for (let i=0; i < toLoad.length; i++) {\n    if (loaded.indexOf(imageObjectToId(toLoad[i]))!==-1)\n      nb ++;\n  }\n  return nb;\n}\n\nfunction extractShaderDebug (shader) {\n  const { types: { uniforms } } = shader;\n  return { types: { uniforms } };\n}\n\nclass GLCanvas extends Component {\n\n  // Life-cycle methods\n\n  constructor (props) {\n    super(props);\n    this._data = props.data;\n  }\n\n  _mount (container) {\n    this._drawCleanups = [];\n    // Create the WebGL Context and init the rendering\n    this._poolObject = canvasPool.create(container);\n    if (!this._poolObject) return;\n    this._cache = this._poolObject.cache;\n    const { canvas, gl, resize } = this._poolObject;\n    const { data } = this.props;\n    if (data) resize(data.width, data.height, data.pixelRatio);\n    this._canvas = canvas;\n\n    this._dirtyOnLoad = true;\n    this._preloading = Object.keys(this._cache._images);\n    this._autoredraw = this.props.autoRedraw;\n    this._pendingCaptureFrame = {};\n\n    this._gl = gl;\n\n    canvas.addEventListener(WEBGL_CONTEXT_LOST, this._onContextLost);\n    canvas.addEventListener(WEBGL_CONTEXT_RESTORED, this._onContextRestored);\n\n    this._resizeUniformContentTextures(this.props.nbContentTextures);\n    this._requestSyncData();\n    this._syncAutoRedraw();\n  }\n\n  _onContextLost = e => {\n    e.preventDefault();\n    this._gl = null;\n    const { onContextLost } = this.props;\n    if (onContextLost) onContextLost();\n  };\n\n  _onContextRestored = () => {\n    if (this._poolObject) {\n      this._poolObject.dispose();\n    }\n    this._mountPoint = null;\n    this.forceUpdate();\n    const { onContextRestored } = this.props;\n    if (onContextRestored) onContextRestored();\n  };\n\n  componentWillUnmount () {\n    this._drawCleanups.forEach(f => f());\n    this._drawCleanups = null;\n    if (this._poolObject) {\n      const { canvas } = this._poolObject;\n      canvas.removeEventListener(WEBGL_CONTEXT_LOST, this._onContextLost);\n      canvas.removeEventListener(WEBGL_CONTEXT_RESTORED, this._onContextRestored);\n      this._poolObject.dispose();\n    }\n    if (this._allocatedFromPool) {\n      this._allocatedFromPool.forEach(pool.freeUint8);\n    }\n    this.setDebugProbe(null);\n    this._mountPoint = null;\n    this._canvas = null;\n    this._gl = null;\n    this._cache = null;\n    if (this._rafAutoRedraw) raf.cancel(this._rafAutoRedraw);\n    if (this._rafDraw) raf.cancel(this._rafDraw);\n    Object.keys(this._pendingCaptureFrame).forEach(key => {\n      this._pendingCaptureFrame[key].reject(new Error(\"GLCanvas is unmounting\"));\n    });\n    this._pendingCaptureFrame = null;\n  }\n\n  componentWillReceiveProps (props) {\n    // react on props changes only for things we can't pre-compute\n    if (props.nbContentTextures !== this.props.nbContentTextures)\n      this._resizeUniformContentTextures(props.nbContentTextures);\n\n    if (props.data !== this.props.data) {\n      this._data = props.data;\n      this._requestSyncData();\n    }\n\n    this._autoredraw = props.autoRedraw;\n    this._syncAutoRedraw();\n  }\n\n  componentWillUpdate () {\n    if (this._poolObject) {\n      const { data } = this.props;\n      if (data) this._poolObject.resize(data.width, data.height, data.pixelRatio);\n    }\n  }\n\n  render () {\n    const { width, height,\n      pixelRatio, style, data, nbContentTextures, imagesToPreload, renderId, onLoad, onProgress, autoRedraw, eventsThrough, visibleContent, // eslint-disable-line\n      ...rest\n    } = this.props;\n    const styles = {\n      ...style,\n      width: width+\"px\",\n      height: height+\"px\",\n      [pointerEventsProperty]: eventsThrough ? \"none\" : \"auto\",\n      position: \"relative\",\n      display: \"inline-block\"\n    };\n    return <div\n      {...rest}\n      ref={ref => {\n        if (ref && !this._mountPoint) {\n          this._mount(this._mountPoint = ref);\n        }\n      }}\n      style={styles}\n    />;\n  }\n\n  // Exposed methods\n\n  captureFrame (config) {\n    let opts;\n    if (config) {\n      invariant(typeof config===\"object\", \"captureFrame takes an object option in parameter\");\n      let nb = 0;\n      if (\"format\" in config) {\n        invariant(\n          typeof config.format === \"string\",\n          \"captureFrame({format}): format must be a string (e.g: 'base64', 'blob'), Got: '%s'\",\n          config.format);\n        nb ++;\n      }\n      if (\"type\" in config) {\n        invariant(\n          typeof config.type === \"string\",\n          \"captureFrame({type}): type must be a string (e.g: 'png', 'jpg'), Got: '%s'\",\n          config.type);\n        nb ++;\n      }\n      if (\"quality\" in config) {\n        invariant(\n          typeof config.quality === \"number\" &&\n          config.quality >= 0 &&\n          config.quality <= 1,\n          \"captureFrame({quality}): quality must be a number between 0 and 1, Got: '%s'\",\n          config.quality);\n        nb ++;\n      }\n      const keys = Object.keys(config);\n      invariant(keys.length === nb, \"captureFrame(opts): opts must be an object with {format, type, quality}, found some invalid keys in '%s'\", keys);\n      opts = config;\n    }\n    opts = {\n      format: \"base64\",\n      type: \"png\",\n      quality: 1,\n      ...opts\n    };\n    const promise = this._addPendingCaptureFrame(opts).promise;\n    this._requestDraw();\n    return promise;\n  }\n\n  setDebugProbe (params) {\n    // Free old\n    if (this._debugProbe) {\n      this._debugProbe = null;\n    }\n    if (params) {\n      invariant(typeof params.onDraw === \"function\", \"onDraw is required in setDebugProbe({ onDraw })\");\n      params = {\n        profile: true,\n        capture: true,\n        captureRate: 0, // in ms. This can be use to throttle the capture. Careful however, you might not get the latest capture in cases where autoRedraw is not used. '0' default value means no throttle.\n        // extends defaults with argument\n        ...params\n      };\n      this._debugProbe = {\n        ...params,\n        lastCapture: 0\n      };\n      this._requestDraw();\n    }\n  }\n\n  setNativeProps (props) {\n    if (\"data\" in props && props.data !== this._data) {\n      this._data = props.data;\n      this._requestSyncData();\n    }\n  }\n\n  requestDraw () {\n    this._requestDraw();\n  }\n\n  // Private methods\n\n  _addPendingCaptureFrame (opts) {\n    const key = opts.format + \":\" + opts.type + \":\" + opts.quality;\n    return this._pendingCaptureFrame[key] || (\n      this._pendingCaptureFrame[key] = { ...defer(), opts }\n    );\n  }\n\n  _capture ({ format, type, quality }) {\n    const canvas = this._canvas;\n    try {\n      switch (format) {\n      case \"base64\": return Promise.resolve(canvas.toDataURL(type, quality));\n      case \"blob\": return new Promise(resolve => canvas.toBlob(resolve, type, quality));\n      default: invariant(false, \"invalid capture format '%s'\", format);\n      }\n    }\n    catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  _getFBO = id => {\n    const fbos = this._cache._fbos; // pool of FBOs\n    invariant(id>=0, \"fbo id must be a positive integer\");\n    if (id in fbos) {\n      return fbos[id]; // re-use existing FBO from pool\n    }\n    else {\n      const fbo = createFBO(this._gl, [ 2, 2 ]);\n      fbo.color[0].minFilter =\n      fbo.color[0].magFilter =\n        this._gl.LINEAR;\n      fbos[id] = fbo;\n      return fbo;\n    }\n  };\n\n  _syncData (data) {\n    // Synchronize the data props that contains every data needed for render\n    const gl = this._gl;\n    if (!gl) return;\n\n    const _onImageLoad = this._onImageLoad;\n    const contentTextures = this._cache._contentTextures;\n    const _getFBO = this._getFBO;\n\n    // old values\n    const prevShaders = this._cache._shaders;\n    const prevImages = this._cache._images;\n    const prevStandaloneTextures = this._cache._standaloneTextures;\n\n    // new values (mutated from traverseTree)\n    const shaders = {}; // shaders cache (per Shader ID)\n    const images = {}; // images cache (per src)\n    const standaloneTextures = [];\n\n    // traverseTree compute renderData from the data.\n    // frameIndex is the framebuffer index of a node. (root is -1)\n    function traverseTree (data) {\n      const {\n        shader: s,\n        uniforms: dataUniforms,\n        children: dataChildren,\n        contextChildren: dataContextChildren,\n        width,\n        height,\n        pixelRatio,\n        fboId\n      } = data;\n\n      const contextChildren = dataContextChildren.map(traverseTree);\n\n      // Traverse children and compute children renderData.\n      // We build a framebuffer mapping (from child index to fbo index)\n      const children = dataChildren.map(traverseTree);\n\n      // Sync shader\n      let shader;\n      if (s in shaders) {\n        shader = shaders[s]; // re-use existing gl-shader instance\n      }\n      else if (s in prevShaders) {\n        shader = shaders[s] = prevShaders[s]; // re-use old gl-shader instance\n      }\n      else {\n        // Retrieve/Compiles/Prepare the shader\n        const shaderObj = Shaders.get(s);\n        invariant(shaderObj, \"Shader #%s does not exists\", s);\n        shader = createShader(gl, vertShader, shaderObj.frag);\n        shader.name = shaderObj.name;\n        shader.attributes._p.pointer();\n        shaders[s] = shader;\n      }\n\n      // extract uniforms and textures\n      let uniforms = {}; // will contains all uniforms values (including texture units)\n      let textures = {}; // a texture is an object with a bind() function\n      let units = 0; // Starting from 0, we will affect texture units to texture uniforms\n      for (const uniformName in dataUniforms) {\n        const value = dataUniforms[uniformName];\n        const type = shader.types.uniforms[uniformName];\n\n        invariant(type, \"Shader '%s': Uniform '%s' is not defined/used\", shader.name, uniformName);\n\n        if (type === \"sampler2D\" || type === \"samplerCube\") {\n          // This is a texture\n          uniforms[uniformName] = units ++; // affect a texture unit\n          if (!value) {\n            const emptyTexture = createTexture(gl, [ 2, 2 ]); // empty texture\n            textures[uniformName] = emptyTexture;\n            standaloneTextures.push(emptyTexture);\n          }\n          else switch (value.type) {\n          case \"content\": // contents are DOM elements that can be rendered as texture (<canvas>, <img>, <video>)\n            textures[uniformName] = contentTextures[value.id];\n            break;\n\n          case \"fbo\": { // framebuffers are a children rendering\n            const fbo = _getFBO(value.id);\n            textures[uniformName] = fbo.color[0];\n            break;\n          }\n\n          case \"uri\": {\n            const src = value.uri;\n            invariant(src && typeof src === \"string\", \"Shader '%s': An image src is defined for uniform '%s'\", shader.name, uniformName);\n            let image;\n            if (src in images) {\n              image = images[src];\n            }\n            else if (src in prevImages) {\n              image = images[src] = prevImages[src];\n            }\n            else {\n              image = new GLImage(gl, _onImageLoad);\n              images[src] = image;\n            }\n            image.src = src; // Always set the image src. GLImage internally won't do anything if it doesn't change\n            textures[uniformName] = image.getTexture(); // GLImage will compute and cache a gl-texture2d instance\n            break;\n          }\n\n          case \"ndarray\": {\n            const tex = createTexture(gl, value.ndarray);\n            const opts = value.opts || {}; // TODO: in next releases we will generalize opts to more types.\n            if (!opts.disableLinearInterpolation)\n              tex.minFilter = tex.magFilter = gl.LINEAR;\n            textures[uniformName] = tex;\n            standaloneTextures.push(tex);\n            break;\n          }\n\n          default:\n            invariant(false, \"Shader '%s': invalid uniform '%s' value of type '%s'\", shader.name, uniformName, value.type);\n          }\n        }\n        else {\n          // In all other cases, we just copy the uniform value\n          uniforms[uniformName] = value;\n        }\n      }\n\n      const notProvided = Object.keys(shader.uniforms).filter(u => !(u in uniforms));\n      invariant(notProvided.length===0, \"Shader '%s': All defined uniforms must be provided. Missing: '\"+notProvided.join(\"', '\")+\"'\", shader.name);\n\n      return { shader, uniforms, textures, children, contextChildren, width, height, pixelRatio, fboId, data };\n    }\n\n    this._renderData = traverseTree(data);\n\n    diffCall(images, prevImages, (img, src) => {\n      const i = this._preloading.indexOf(src);\n      if (i !== -1) this._preloading.splice(i, 1);\n    });\n    // Destroy previous states that have disappeared\n    this._dispatchDrawCleanup(() => {\n      diffCall(shaders, prevShaders, disposeFunction);\n      diffCall(images, prevImages, disposeFunction);\n      prevStandaloneTextures.forEach(disposeFunction);\n    });\n\n    this._cache._shaders = shaders;\n    this._cache._images = images;\n    this._cache._standaloneTextures = standaloneTextures;\n\n    this._needsSyncData = false;\n  }\n\n  _dispatchDrawCleanup (f) {\n    this._drawCleanups.push(f);\n  }\n\n  _draw () {\n    this._needsDraw = false;\n    const gl = this._gl;\n    const renderData = this._renderData;\n    if (!gl || !renderData) return;\n    const _getFBO = this._getFBO;\n    const buffer = this._cache._buffer;\n\n    const allocatedFromPool = [];\n    const debugProbe = this._debugProbe;\n    let shouldDebugCapture = false, shouldProfile = false;\n    if (debugProbe) {\n      if (debugProbe.capture) {\n        const t = now();\n        if (t - debugProbe.lastCapture > debugProbe.captureRate) {\n          debugProbe.lastCapture = t;\n          shouldDebugCapture = true;\n        }\n      }\n      shouldProfile = debugProbe.profile;\n    }\n\n    function recDraw (renderData) {\n      const { shader, uniforms, textures, children, contextChildren, width, height, pixelRatio, fboId, data } = renderData;\n\n      const debugNode = debugProbe ? { ...data, shaderInfos: extractShaderDebug(shader) } : {};\n      let profileExclusive;\n\n      const w = width * pixelRatio, h = height * pixelRatio;\n\n      // contextChildren are rendered BEFORE children and parent because are contextual to them\n      debugNode.contextChildren = contextChildren.map(recDraw);\n\n      // children are rendered BEFORE the parent\n      debugNode.children = children.map(recDraw);\n\n      if (shouldProfile) {\n        profileExclusive = now();\n      }\n\n      let fbo;\n      if (fboId === -1) {\n        // special case for root FBO\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.viewport(0, 0, w, h);\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n      }\n      else {\n        // Use the framebuffer of the node\n        fbo = _getFBO(fboId);\n        syncShape(fbo, [ w, h ]);\n        fbo.bind();\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n      }\n\n      // Prepare the shader/buffer\n      shader.bind();\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n      // Bind the textures\n      for (const uniformName in textures) {\n        textures[uniformName].bind(uniforms[uniformName]);\n      }\n\n      // Set the uniforms\n      for (const uniformName in uniforms) {\n        shader.uniforms[uniformName] = uniforms[uniformName];\n      }\n\n      // Render\n      gl.clearColor(0.0, 0.0, 0.0, 0.0);\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      gl.drawArrays(gl.TRIANGLES, 0, 3);\n\n\n      if (shouldProfile) {\n        profileExclusive = now() - profileExclusive;\n        let profileInclusiveSum = 0;\n        debugNode.contextChildren.forEach(({ profileInclusive }) => {\n          profileInclusiveSum += profileInclusive;\n        });\n        debugNode.children.forEach(({ profileInclusive }) => {\n          profileInclusiveSum += profileInclusive;\n        });\n        Object.keys(data.uniforms).forEach(key => {\n          const value = data.uniforms[key];\n          if (typeof value === \"object\" && value.type === \"content\")\n            profileInclusiveSum += debugContents[value.id].profileExclusive;\n        });\n        debugNode.profileExclusive = profileExclusive;\n        debugNode.profileInclusive = profileInclusiveSum + profileExclusive;\n      }\n\n      if (shouldDebugCapture) {\n        var pixels = pool.mallocUint8(w * h * 4);\n        allocatedFromPool.push(pixels);\n        gl.readPixels(0, 0, w, h, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n        debugNode.capture = { pixels, width: w, height: h };\n      }\n\n      return debugNode;\n    }\n\n    // Draw the content to contentTextures (assuming they ALWAYS change and need a re-_syncData)\n    const contents = this._getDrawingUniforms();\n    const contentTextures = this._cache._contentTextures;\n    const debugContents = contents.map((content, i) => {\n      let profile;\n      if (shouldProfile) {\n        profile = now();\n      }\n      this._syncUniformTexture(contentTextures[i], content);\n      if (shouldProfile) {\n        profile = now() - profile;\n      }\n      if (debugProbe) {\n        let capture;\n        if (shouldDebugCapture) {\n          capture = content; // gl-texture2d can reconciliate dom node rendering\n        }\n        return {\n          code: content.parentNode.innerHTML,\n          capture,\n          profileExclusive: profile,\n          profileInclusive: profile\n        };\n      }\n    });\n\n    // Draw everything\n\n    gl.enable(gl.BLEND);\n    const debugTree = recDraw(renderData);\n    gl.disable(gl.BLEND);\n\n    if (this._drawCleanups.length > 0) {\n      this._drawCleanups.forEach(f => f());\n      this._drawCleanups = [];\n    }\n\n    if (debugProbe) {\n      if (this._allocatedFromPool) {\n        this._allocatedFromPool.forEach(pool.freeUint8);\n      }\n      this._allocatedFromPool = allocatedFromPool;\n      debugProbe.onDraw({\n        tree: debugTree,\n        contents: debugContents,\n        Shaders\n      });\n    }\n\n    const _pendingCaptureFrame = this._pendingCaptureFrame;\n    const pendingCaptureFramePerOption = Object.keys(_pendingCaptureFrame);\n    if (pendingCaptureFramePerOption.length > 0) {\n      pendingCaptureFramePerOption.forEach(key => {\n        const {opts, resolve, reject} = _pendingCaptureFrame[key];\n        this._capture(opts).then(resolve, reject);\n      });\n      this._pendingCaptureFrame = {};\n    }\n\n    if (this._dirtyOnLoad && !this._haveRemainingToPreload()) {\n      this._dirtyOnLoad = false;\n      if (this.props.onLoad) {\n        this.props.onLoad();\n      }\n    }\n  }\n\n  _haveRemainingToPreload () {\n    return this.props.imagesToPreload.some(o => this._preloading.indexOf(imageObjectToId(o)) === -1);\n  }\n\n  _onImageLoad = loadedObj => {\n    this._preloading.push(loadedObj);\n    const {imagesToPreload, onProgress} = this.props;\n    const loaded = countPreloaded(this._preloading, imagesToPreload);\n    const total = imagesToPreload.length;\n    if (onProgress) onProgress({\n      progress: loaded / total,\n      loaded,\n      total\n    });\n    this._dirtyOnLoad = true;\n    this._requestSyncData();\n  };\n\n  _resizeUniformContentTextures (n) { // Resize the pool of textures for the contentTextures\n    const gl = this._gl;\n    const contentTextures = this._cache._contentTextures;\n    const length = contentTextures.length;\n    if (length === n) return;\n    if (n < length) {\n      for (let i = n; i < length; i++) {\n        contentTextures[i].dispose();\n      }\n      contentTextures.length = n;\n    }\n    else {\n      for (let i = contentTextures.length; i < n; i++) {\n        const texture = createTexture(gl, [ 2, 2 ]);\n        texture.minFilter = texture.magFilter = gl.LINEAR;\n        contentTextures.push(texture);\n      }\n    }\n  }\n\n  _getDrawingUniforms () {\n    const {nbContentTextures} = this.props;\n    if (nbContentTextures === 0) return [];\n    const children = this._mountPoint.parentNode.children;\n    const all = [];\n    for (var i = 0; i < nbContentTextures; i++) {\n      all[i] = children[i].firstChild;\n    }\n    return all;\n  }\n\n  _syncAutoRedraw () {\n    if (!this._autoredraw || this._rafAutoRedraw) return;\n    const loop = () => {\n      if (!this._autoredraw) {\n        delete this._rafAutoRedraw;\n        return;\n      }\n      this._rafAutoRedraw = raf(loop);\n      this._draw();\n    };\n    this._rafAutoRedraw = raf(loop);\n  }\n\n  _syncUniformTexture (texture, content) {\n    const width = content.width || content.videoWidth;\n    const height = content.height || content.videoHeight;\n    if (width && height) { // ensure the resource is loaded\n      syncShape(texture, [ width, height ]);\n      texture.setPixels(content);\n    }\n    else {\n      texture.shape = [ 2, 2 ];\n    }\n  }\n\n  _requestSyncData () {\n    this._needsSyncData = true;\n    this._requestDraw();\n  }\n\n  _requestDraw () {\n    if (this._rafDraw) return;\n    this._rafDraw = raf(this._handleDraw);\n  }\n\n  _handleDraw = () => {\n    delete this._rafDraw;\n    if (this._needsSyncData) {\n      try {\n        this._syncData(this._data);\n      }\n      catch (e) {\n        if (!(\"rawError\" in e)) { // Duck-typing on gl-shader error. can be improved\n          throw e;\n        }\n      }\n    }\n    if (!this._haveRemainingToPreload()) {\n      this._draw();\n    }\n  };\n\n\n}\n\nGLCanvas.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  pixelRatio: PropTypes.number.isRequired,\n  data: PropTypes.object.isRequired,\n  nbContentTextures: PropTypes.number.isRequired\n};\n\nmodule.exports = GLCanvas;\n"]}