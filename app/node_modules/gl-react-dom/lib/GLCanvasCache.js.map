{"version":3,"sources":["../src/GLCanvasCache.js"],"names":["GLCanvasCache","gl","_images","_shaders","_fbos","_contentTextures","_standaloneTextures","pixelStorei","UNPACK_FLIP_Y_WEBGL","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","_buffer","prototype","dispose","forEach","t","k","coll","deleteBuffer","module","exports"],"mappings":";;AACA,SAASA,aAAT,CAAwBC,EAAxB,EAA4B;AAC1B,OAAKA,EAAL,GAAUA,EAAV;AACA,OAAKC,OAAL,GAAe,EAAf;AACA,OAAKC,QAAL,GAAgB,EAAhB;AACA,OAAKC,KAAL,GAAa,EAAb;AACA,OAAKC,gBAAL,GAAwB,EAAxB;AACA,OAAKC,mBAAL,GAA2B,EAA3B;;AAEAL,KAAGM,WAAH,CAAeN,GAAGO,mBAAlB,EAAuC,IAAvC;;AAEA,MAAMC,SAASR,GAAGS,YAAH,EAAf;AACAT,KAAGU,UAAH,CAAcV,GAAGW,YAAjB,EAA+BH,MAA/B;AACAR,KAAGY,UAAH,CACEZ,GAAGW,YADL,EAEE,IAAIE,YAAJ,CAAiB,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAC,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAC,CAApB,CAAjB,CAFF,EAE4C;AAC1Cb,KAAGc,WAHL;AAKA,OAAKC,OAAL,GAAeP,MAAf;AACD;;AAEDT,cAAciB,SAAd,GAA0B;AACxBC,SADwB,qBACb;AACT;AACA,SAAKb,gBAAL,CAAsBc,OAAtB,CAA8B;AAAA,aAAKC,EAAEF,OAAF,EAAL;AAAA,KAA9B;AACA,SAAKZ,mBAAL,CAAyBa,OAAzB,CAAiC;AAAA,aAAKC,EAAEF,OAAF,EAAL;AAAA,KAAjC;AACA,KACE,KAAKf,QADP,EAEE,KAAKD,OAFP,EAGE,KAAKE,KAHP,EAIEe,OAJF,CAIU,gBAAQ;AAChB,WAAK,IAAME,CAAX,IAAgBC,IAAhB,EAAsB;AACpBA,aAAKD,CAAL,EAAQH,OAAR;AACA,eAAOI,KAAKD,CAAL,CAAP;AACD;AACF,KATD;;AAWA,QAAI,KAAKpB,EAAT,EAAa,KAAKA,EAAL,CAAQsB,YAAR,CAAqB,KAAKP,OAA1B;AACb,SAAKf,EAAL,GAAU,IAAV;AACD;AAlBuB,CAA1B;;AAuBAuB,OAAOC,OAAP,GAAiBzB,aAAjB","file":"GLCanvasCache.js","sourcesContent":["\nfunction GLCanvasCache (gl) {\n  this.gl = gl;\n  this._images = {};\n  this._shaders = {};\n  this._fbos = {};\n  this._contentTextures = [];\n  this._standaloneTextures = [];\n\n  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array([-1, -1, -1, 4, 4, -1]), // see a-big-triangle\n    gl.STATIC_DRAW\n  );\n  this._buffer = buffer;\n}\n\nGLCanvasCache.prototype = {\n  dispose () {\n    // Destroy everything to avoid leaks.\n    this._contentTextures.forEach(t => t.dispose());\n    this._standaloneTextures.forEach(t => t.dispose());\n    [\n      this._shaders,\n      this._images,\n      this._fbos\n    ].forEach(coll => {\n      for (const k in coll) {\n        coll[k].dispose();\n        delete coll[k];\n      }\n    });\n\n    if (this.gl) this.gl.deleteBuffer(this._buffer);\n    this.gl = null;\n  }\n};\n\n\n\nmodule.exports = GLCanvasCache;\n"]}